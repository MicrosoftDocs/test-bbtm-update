{
    "Slug": "announcing-general-availability-of-mobile-offline-sync",
    "Title": "Announcing General Availability of Mobile Offline Sync Managed SDK",
    "Summary": "The best mobile apps handle network interruptions gracefully, allowing users to be productive despite the lack of connectivity. Learn how you can use the offline sync feature of Azure Mobile Services, to create responsive apps that work, even when the network doesn’t. ",
    "Content": "When writing modern mobile apps, developers have to consider the reality that end users may not always have network access. This can be due to a transient network issue, or it could be a mobile app that’s often used in remote areas with little connectivity. Also, sometimes mobile data plans can be very expensive, so users appreciate apps that limit their network calls. However, many apps don't work offline, because of the challenges of implementing correct sync behavior.\n\nFortunately, Azure Mobile Services allows you to easily provide a native sync experience across your iOS, Android, and Windows apps. The feature is available on both the JavaScript and .NET backends, and supports multiple clients: <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data\">Windows Universal</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/\">iOS</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-xamarin-ios-get-started-offline-data\">Xamarin iOS</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-xamarin-android-get-started-offline-data\">Xamarin Android</a>, and <a href=\"https://azure.microsoft.com/blog/2014/08/07/offline-support-in-azure-mobile-services-android-sdk/\">Android</a>.\n\nWe are pleased to announce general availability of the <a href=\"https://www.nuget.org/packages/WindowsAzure.MobileServices.SQLiteStore\" target=\"_blank\">offline managed client SDK</a>, which is supported on Windows and Xamarin. GA for the iOS and Android SDKs is coming soon.\n\nOffline sync has a number of benefits:\n<ul>\n\t<li>Improve app responsiveness by caching server data locally on the device</li>\n\t<li>Create robust apps that remain useful when there are network issues</li>\n\t<li>Allow end-users to create and modify data even when there is no network access, supporting scenarios with little or no connectivity</li>\n\t<li>Sync data across multiple devices and detect conflicts when the same record is modified by two devices</li>\n\t<li>Limit network use for customers who don't have an unlimited data plan</li>\n</ul>\nWhen your app is in offline mode, users can still create and modify data, which will be saved to a local store. When the app is back online, it can synchronize local changes with the Mobile Services backend. The feature also includes support for detecting conflicts when the same record is changed on both the client and the backend. Conflicts can then be handled either on the server or the client.\n\nWe've updated the quickstarts in the Azure portal to make it even easier to add offline support to your app. The quickstarts for Xamarin.iOS and Xamarin.Android are now offline enabled. Because Windows requires that the <a href=\"https://www.sqlite.org/download.html\" target=\"_blank\">SQLite VSIX</a> be installed, the Windows quickstart has all the offline code, but commented out.\n\nIf you’re already using Mobile Services, it’s easy to make your app offline-enabled. Just add the NuGet package <a href=\"https://www.nuget.org/packages/WindowsAzure.MobileServices.SQLiteStore\" target=\"_blank\">WindowsAzure.MobileServices.SQLiteStore</a><b></b>. Next, when connecting to your mobile service, use the method <b>GetSyncTable</b> instead of <b>GetTable</b>:\n<pre class=\"prettyprint\">IMobileServiceSyncTable todoTable = App.MobileService.GetSyncTable(); // offline access</pre>\nNow, set up a local sync store. This code can go in the event handler of <strong>OnNavigatedTo</strong>, for instance. You can define your own sync store or use the provided SQLite-based implementation:\n<pre class=\"prettyprint\">if (!App.MobileService.SyncContext.IsInitialized)\n{\n    var store = new MobileServiceSQLiteStore(\"localsync.db\");\n    store.DefineTable&lt;TodoItem&gt;();\n    await App.MobileService.SyncContext.\n    InitializeAsync(store, new MobileServiceSyncHandler());\n}</pre>\nYour app should now use <b>IMobileServiceSyncTable</b> (instead of <b>IMobileServiceTable</b>) for CRUD operations. This will save changes to the local database and also keep a log of the changes. When the app is ready to synchronize its changes with the Mobile Service, use the methods <b>PushAsync</b> and <b>PullAsync</b>:\n<pre class=\"prettyprint\">await App.MobileService.SyncContext.PushAsync();\n\nawait todoTable.PullAsync(\"queryID\", myQuery);</pre>\nThe <strong>PullAsync</strong> method takes as the first parameter a query ID, which is a string that uniquely identifies the query in your app. The query ID is used for incremental sync, and is used to store the last updated timestamp from the results of the last pull operation.\n\nIf you want to opt out of incremental sync, pass <b>null</b> as the query ID. In this case, all records will be retrieved on every call to <strong>PullAsync</strong>, which can be inefficient.\n\nYou can also pass a query to <strong>PullAsync</strong>, so that you store only a subset of records on the device. However, if your query has a parameter, then the same parameter value has to be part of the query ID.\n\nFor more information, see the <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data/\">Windows</a> and <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-xamarin-ios-get-started-offline-data/\">Xamarin</a> offline tutorials.\n\nThe code above covered Universal apps, but it’s just as easy to add offline sync support to apps for <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/\">iOS</a> and <a href=\"https://azure.microsoft.com/blog/2014/08/07/offline-support-in-azure-mobile-services-android-sdk/\">Android</a>.\n\nTo learn more about the feature, should check out the following resources:\n<ul>\n\t<li>Tutorials: <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data/\">Windows</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-xamarin-ios-get-started-offline-data/\">Xamarin iOS</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-xamarin-android-get-started-offline-data\">Xamarin Android</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/\">iOS</a>, and <a href=\"https://azure.microsoft.com/blog/2014/08/07/offline-support-in-azure-mobile-services-android-sdk/\">Android</a>.</li>\n\t<li>Videos: <a href=\"https://azure.microsoft.com/en-us/documentation/videos/azure-mobile-services-offline-enabled-apps-with-donna-malayeri/\" target=\"_blank\">Azure Friday video on Offline Sync</a>, <a href=\"https://channel9.msdn.com/Shows/Cloud+Cover/Episode-155-Offline-Storage-with-Donna-Malayeri\" target=\"_blank\">Cloud Cover episode on offline sync</a></li>\n\t<li>Xamarin samples: <a href=\"https://github.com/lindydonna/mobile-demos/tree/master/XamarinOffline.iOS\">iOS</a>, <a href=\"https://github.com/lindydonna/mobile-demos/tree/master/XamarinOffline.Android\">Android</a>, <a href=\"https://github.com/lindydonna/mobile-demos/tree/master/XamarinFormsOffline\">Xamarin Forms</a></li>\n\t<li>Solution accelerator – <a href=\"https://code.msdn.microsoft.com/windowsazure/Field-Engineer-501df99d\">Field Engineer</a> (Windows Store)</li>\n</ul>"
}