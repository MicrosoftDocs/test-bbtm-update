{
    "Slug": "a-fintech-startup-pivots-to-azure-cosmos-db",
    "Title": "A fintech startup pivots to Azure Cosmos DB",
    "Summary": "The right technology choices can accelerate success for a cloud born business. This is true for the fintech start-up clearTREND Research. Their solution architecture team knew one of the most important decisions would be the database decision between SQL or NoSQL.",
    "Content": "<p>The right technology choices can accelerate success for a cloud born business. This is true for the fintech start-up <a href=\"https://cleartrendresearch.com/\" target=\"_blank\">clearTREND Research</a>. Their solution architecture team knew one of the most important decisions would be the database decision between SQL or NoSQL. After research, experimentation, and many design iterations the team was thrilled with their decision to deploy on Microsoft <a href=\"https://azure.microsoft.com/en-us/services/cosmos-db/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">Azure Cosmos DB</a>. This blog is about how their decision was made.</p>\n\n<p>Data and AI are driving a surge of cloud business opportunities, and one technology decision that deserves careful evaluation is the choice of a cloud database. Relational databases continue to be popular and drive a significant demand with cloud-based solutions, but NoSQL databases are well suited for distributed global scale solutions.</p>\n\n<p>For our partner clearTREND, the plan was to commercialize a <a href=\"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/cleartrend.cleartrend_research?tab=Overview\" target=\"_blank\">financial trend engine</a> and provide a subscription investment service to individuals and professionals. The team responsible for clearTREND&rsquo;s SaaS solution are a veteran team of software developers and architects who have been implementing cloud-based solutions for years. They understood the business opportunity and wanted to better understand the database technology options. Through their due diligence, the architecture morphed as business priorities and data sets were refined. After a lot of research and hands-on experimentation, the architectural team decided on Azure Cosmos DB as the best fit for the solution.</p>\n\n<p>Especially in the financial industry, business models are under attack. Cosmos DB is a technology that can adapt, evolve and allow a business to innovate faster and turn opportunities into strategic advantages.&nbsp;</p>\n\n<h2>Six reasons to choose Azure Cosmos DB</h2>\n\n<p>Below are reasons the team at clearTREND selected Azure Cosmos DB:</p>\n\n<ol>\n\t<li><strong>Schema design is much easier and flexible</strong>. With an agile development methodology, schemas change frequently and the ability to quickly and safely implement changes is a big advantage. Azure Cosmos DB is schema-agnostic so there is massive flexibility around how the data can be consumed.</li>\n\t<li><strong>Database reads and writes are really fast</strong>. Azure Cosmos DB can provide less than 10 millisecond reads and writes, backed with a <a href=\"https://azure.microsoft.com/en-us/support/legal/sla/cosmos-db/v1_0/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">service level agreement</a> (SLA).</li>\n\t<li><strong>Queries run lightning fast and autoindexing is a game-changer</strong>. Reads and writes based on a primary or partition key are fast, but for many NoSQL implementations, queries executed against non-keyed document attributes may perform poorly. Secondary indexing can be a management and maintenance burden. By default, Azure Cosmos DB automatically indexes all the attributes in a document, so query performance is optimized as soon as data is loaded. Another benefit of auto-indexing is that the schema and indexes are fully synchronized so schema changes can be implemented quickly without downtime or management needed for secondary indexes.</li>\n\t<li><strong>With thoughtful design Azure Cosmos DB can be very cost-effective</strong>. The Azure Cosmos DB cost model depends on how the database is designed via number of collections, partitioning key, index strategy, document size, and number of documents. Pricing for Azure Cosmos DB is based on resources that have been reserved, these resources are called request units or RUs and are described in the &ldquo;<a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">Request Units in Azure Cosmos DB</a>&rdquo; documentation. The clearTREND schema design is implemented as a single document collection and the entire cost of the solution on Azure, including Azure Cosmos DB is at an affordable monthly price. Keep in mind this is a managed database service so monthly cost includes support, 99.999 percent high-availability, an SLA for read and write performance, automatic partitioning, data encrypted by default, and automatic backups.</li>\n\t<li><strong>Programmatically re-size capacity for workload bursts</strong>. The clearTREND workload has a predictable daily burst pattern and RUs can be programmatically adjusted. When additional compute resources are needed for complex processing or to meet higher throughput requirements, RUs can be increased. Once the processing completes, RUs are adjusted back down. This elasticity means Azure Cosmos DB can be re-sized in order to cost-effectively adapt to workload demands.</li>\n\t<li><strong>Push-button globally distributed data</strong>. Designing for future scalability of a solution can be tricky, technology and design choices can become inefficient as a solution grows beyond the initial vision. The advantage with Azure Cosmos DB is that it can become a globally configured, massively scaled out solution with just a few clicks. There are none of the operational complications of setting up and managing a cloud-scale, NoSQL distributed database.</li>\n</ol>\n\n<h2>Design and implementation tips for Azure Cosmos DB</h2>\n\n<p>If you are new to Azure Cosmos DB, here are some tips from the clearTREND team to consider when designing and implementing a solution:&nbsp;&nbsp;</p>\n\n<ul>\n\t<li><strong>Design the schema around query and API optimization</strong>. Schema design for a NoSQL database is just as important as it is for a relational database management system (RDBMS) database, but it&rsquo;s different. While a NoSQL database doesn&rsquo;t require pre-defined table structures, you do have to be intentional about organizing and defining the document schema while also being aware of where and how relationships will be represented and embedded. To guide the schema design, the clearTREND team tends to group data based on the data elements that are written and retrieved by the solution&rsquo;s APIs.</li>\n\t<li><strong>Implement a flexible partition key.</strong> Cosmos DB requires a partition key to be specified when creating a document collection over 10GB. Deciding on a partition key can be tricky because initially it may not be clear what the optimal choice is for a partition key: should it be a data category, a geographical region, an identifier, or a timescale (like monthly or yearly)? A poorly designed partition key can create a performance bottleneck called a &lsquo;hot spot&rsquo; which concentrates read and write activity on a single partition rather than distributing activity evenly across partitions.&nbsp; When the partition key for a database changes, it requires a re-indexing operation that can impact application availability as the underlying data is copied to a new collection and re-indexed.&nbsp;&nbsp;<br>\n\t&nbsp;<br>\n\tThe clearTrend team built some flexibility into the design of the partition key to mitigate the need for database re-indexing operations.&nbsp; For their scenario, a common field in their document collection is type and each type has its own schema.&nbsp; During design they realized an optimal partition key might be different depending upon the type of document.&nbsp; Type became one of the partition key values.&nbsp; For a second value in the partition key, the team defined a logical field as a string and named it <strong>PartitionID</strong>.&nbsp; The idea behind <strong>PartitionID</strong> is that it can initially be set to one value (client identifier for example) and later &ndash; when a more efficient key value was determined &ndash; programmatically replaced with a new value.&nbsp;&nbsp; With this approach, the logical definition of the partition key does not change but the partition key value can change.&nbsp;&nbsp; CosmosDB will have to re-hash the partition key and re-locate the items in the correct logical partition but it can be used to avert a database-wide re-indexing operation when only a subset of the documents in the collection are impacted.</li>\n\t<li><strong>Consider a schema design based on a single collection</strong>. A common design strategy is to use one document type per collection, but there are benefits to storing multiple document types in a single collection. Collections are the basis for partitioning and indexing so it may not seem intuitive to store multiple document types in a single collection. But it can maximize functionality with no cross-collection operations needed and minimize overall cost, this is because a single collection is less expensive than multiple collections. The clearTREND solution has seven different document types, all stored in a single collection. The approach is implemented with an enumerated field called <strong>doc type</strong> from which all documents are derived. Every document has a doc type property to correspond to one of the seven document types.&nbsp;&nbsp;&nbsp;&nbsp;</li>\n\t<li><strong>Tune schema design by understanding the RU costs of complex queries and stored procedure operations</strong>. It can be difficult to anticipate the costs for complex queries and stored procedures, especially if you don&rsquo;t know in advance how many reads or writes Azure Cosmos DB will need to execute the operation. Capture the metrics and costs (RUs) for complex operations and use the information to streamline schema design. One way to capture these metrics is to execute the query or stored procedure from the Azure <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/monitor-accounts/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">Cosmos DB dashboard</a> on the Azure portal.</li>\n\t<li><strong>Consider embedding a simple or calculated expression as a document property</strong>. If there are requirements to calculate a simple aggregation like a count, sum, minimum, and maximum, or there is a need to evaluate a simple Boolean logic expression, it may make sense to define the expression as a property of the base document class. For instance, in a logging application there is likely logic to evaluating conditions and determine if an operation has been successful or not. If the logic is a simple Boolean expression like the one below, consider including it in the class definition:</li>\n</ul>\n\n<pre>\npublic class LogStatus\n{\n    // C# example of a Boolean expression embedded in a class definition\n      public bool Failed =&gt; !((WasReadSuccessful &amp;&amp; WasOptimizationSuccssful &amp;&amp; StatusMsg == &ldquo;Success&rdquo;) ||\n(WasReadSuccessful &amp;&amp; !IsDataCurrent));\n      public string StatusMsg {get; set;}\n      public bool WasReadSuccessful {get; set;}\n      public bool WasOptimizationSuccessful {get;set}\n      public bool IsDataCurrent {get;set}\n  }</pre>\n\n<p>The command field showing <strong>Failed </strong>is defined as a read-only calculated property. If database usage is primarily read intensive, then this approach has the potential to reduce overall RU cost as the expression is evaluated and stored or when the document is written. This is an alternative to reducing cost each time the document is queried.&nbsp;</p>\n\n<ul>\n\t<li><strong>Remember, referential integrity is implemented in the application layer</strong>. Referential integrity ensures that relationships between data elements are preserved, and with an RDBMS referential integrity is enforced through keys. For example, an RDBMS uses primary and foreign keys to ensure a product exists before an order for it can be created. If referential integrity is a requirement and data dependencies need to be monitored and enforced, it needs to be done at the application layer. Be rigorous about testing for referential and data integrity.</li>\n\t<li><strong>Use Application Insights to monitor Azure Cosmos DB activity</strong>. <a href=\"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-overview/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">Application Insights</a> is a telemetry service and for this solution was used to collect and report detailed performance, availability, and usage information about Azure Cosmos DB activities. <a href=\"https://azure.microsoft.com/en-us/services/functions/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">Azure Functions</a> provided the integration between Azure Cosmos DB and Application Insights using <a href=\"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-metrics-explorer/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">Metrics Explorer</a> and the capability to capture <a href=\"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-api-custom-events-metrics/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">custom events</a> using <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.applicationinsights.telemetryclient?view=azure-dotnet/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">TelemetryClient.GetMetric()</a><strong> </strong>.</li>\n</ul>\n\n<blockquote>\n<p>&ldquo;Integration with AppInsights is fantastic&hellip;.&rdquo; Tim Miller, Principal Consultant &ndash; Skyline Technologies</p>\n</blockquote>\n\n<ul>\n</ul>\n\n<h2>Recommended next steps</h2>\n\n<p>NoSQL is a paradigm rapidly shifting the way database solutions are implemented in the cloud. Whether you are a developer or database professional, Azure Cosmos DB is an increasingly important player in the cloud database landscape and can be a game changer for your solution. If you haven&rsquo;t already, get introduced to the advantages and capabilities of Azure Cosmos DB. Take a look at the <a href=\"https://azure.microsoft.com/en-us/blog/a-technical-overview-of-azure-cosmos-db/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">documentation</a>, dissect the <a href=\"https://github.com/Azure-Samples/documentdb-dotnet-todo-app\" target=\"_blank\">sample GitHub application</a>, and learn more about design patterns:</p>\n\n<ul>\n\t<li><a href=\"https://www.skylinetechnologies.com/Case-Studies/fintech-startup-commercializes-internal-saas-tool\" target=\"_blank\">Fintech Startup Commercializes Internal tool as a SaaS Product</a>.</li>\n\t<li><a href=\"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/cleartrend.cleartrend_research?tab=Overview\" target=\"_blank\">Discover clearTREND, the world&rsquo;s first cloud-based financial trend engine</a>.</li>\n\t<li><a href=\"https://azure.microsoft.com/en-us/try/cosmosdb/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">Try Azure Cosmos DB for free</a>. You get a limited time, full-service experience. Try it out, run through a tutorial or demo, and step through a quick start without a required Azure account or credit card.</li>\n\t<li>If you are a developer, <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/local-emulator/?WT.mc_id=ms-docs-kbaroni\" target=\"_blank\">try out the Azure Cosmos DB emulator</a>. Develop and test an application locally without creating an Azure subscription or incurring costs. Once the application works, switch to using Azure Cosmos DB.</li>\n</ul>\n\n<h2>Thank you to our partners clearTREND and Skyline Technologies!</h2>\n\n<p>One of the great things about working for Microsoft are the opportunities to work with customers and partners, and to learn through them about their creative approaches for implementing technology. The team that designed and implemented the clearTREND solution are architects and developers with <a href=\"https://www.skylinetechnologies.com/\" target=\"_blank\">Skyline Technologies</a>. Passionate about their business clients and solving complex technical challenges, they were very early cloud adopters. We especially appreciate the team members who gave their time to this effort including <a href=\"https://www.linkedin.com/in/timrmiller\" target=\"_blank\">Tim Miller</a>, <a href=\"https://www.linkedin.com/in/greglevenhagen/\" target=\"_blank\">Greg Levenhagen</a>, and <a href=\"https://www.linkedin.com/in/mikelauer/\" target=\"_blank\">Michael Lauer</a>. It&rsquo;s been a pleasure working with you.</p>\n"
}