{
    "Slug": "announcing-azure-sdk-2-5-for-net-and-visual-studio-2015-preview",
    "Title": "Announcing Azure SDK 2.5 for .NET and Visual Studio 2015 Preview",
    "Summary": "Today, we are excited to announce Azure SDK 2.5 for Visual Studio 2012, 2013 and 2015 Preview. We are also excited to announce Visual Studio 2015 Preview which adds even more Azure features.",
    "Content": "Today, we are excited to announce Azure SDK 2.5 for Visual Studio 2012, 2013 and 2015 Preview.  We are also excited to announce Visual Studio 2015 Preview which adds even more Azure features.  This post describes the features in these releases and the scenarios they enable.\n\n<span style=\"text-decoration: underline\">Azure SDK 2.5 for .NET [download for <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs2013AzurePack.appids\">VS 2013</a> | <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs11AzurePack.appids\">VS 2012</a> | <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs2015AzurePack.appids\">VS 2015 Preview</a>]</span>\n<ul>\n <li><strong>Diagnostics improvements for Cloud Services and Virtual Machines</strong>: Diagnostics features now use the Azure extension model so you can turn on diagnostics or update the configuration without redeploy.  New features include ETW for structured logging, crash dumps and Virtual Machines support for the first time.</li>\n <li><strong>Azure Resource Manager Tools</strong>: Create an application made up of multiple Azure resources using Azure Gallery templates.  The experience is available with a new Cloud Deployment Project type that enables creating complex environments in a declarative and repeatable way by using JSON templates and parameter files.</li>\n <li><strong>QuickStarts</strong>: The File &gt; New Project &gt; Cloud dialog includes new templates to demonstrate Microsoft Azure services.</li>\n <li><strong>WebJobs remote debugging and Server Explorer support</strong>: We previously added the ability to publish WebJobs from Console or Web projects.  This release adds Server Explorer support and remote debugging.</li>\n <li><strong>Support for Blob folders in Storage Explorer</strong>: View and create folders in Blob Storage containers using Storage Explorer.</li>\n <li><strong>HDInsight Server Explorer and Hive Query support</strong>: Write Hive queries and view Hive jobs, right from Visual Studio.</li>\n</ul>\n∙\n\n<span style=\"text-decoration: underline\">Visual Studio 2015 Preview [<a href=\"https://aka.ms/vs2015preview\">download</a>]</span>\n\nAzure SDK 2.5 is the first supported Azure SDK for the Visual Studio 2015 Preview. In addition to the Visual Studio 2013 features above, Visual Studio 2015 Preview introduces the following capabilities:\n<ul>\n <li><strong>Add Connected Services</strong>: Easily connect to services such as Azure Storage and Mobile Services.  The flow adds appropriate project references, inserts connection strings and provides getting started guidance on consuming the services.</li>\n <li><strong>Enterprise SSO</strong>: Configure enterprise single sign on (SSO) easily using Azure Active Directory.</li>\n <li><strong>Connect Visual Studio to multiple Azure accounts</strong>: Your Visual Studio sign-in now automatically signs you into your Azure subscriptions. You can also sign in to additional Azure accounts to simultaneously access the Azure subscriptions and resources across all those accounts.</li>\n <li><strong>Code Analysis for Azure</strong>: This NuGet package provides code analysis rules that identify coding patterns which cause performance, scalability or security problems with your Azure applications.</li>\n <li><strong>ASP.NET 5.0</strong>: Publish to Azure has been updated with a Preview tab and performance improvements.</li>\n</ul>\n<h1>Diagnostics: Improved diagnostics logging with ETW</h1>\nYou can now perform structured and sematic logging using ETW Event Sources. ETW event sources and event IDs allow you to define logical events and stages of the application workflow. Track events across multiple tiers to help diagnose issues in your application workflow.\n\nTo enable logging of Event Sources, first define an event class in your source. The following snippet shows an <b>EventSource</b> for a sample guestbook application with two events:\n<pre class=\"prettyprint\">[EventSource(Name=\"Contoso-GuestBook\")]\npublic sealed class GuestBookEventSource: EventSource\n{\n    ...\n\n    [Event(1, Message = \"Added entry in table storage for guest '{1}'\", \nLevel = EventLevel.Informational)]\n    public void GuestBookEntryAdded (string guestName, Guid activityID )\n    {\n        if (this.IsEnabled()) {WriteEvent(1, guestName, activityID);}\n    }\n\n    [Event(2, Message = \"Queued message to process blob '{0}'\", \nLevel = EventLevel.Informational)]\n    public void ThumbnailRequestPosted(string pictureUrl, Guid activityID)\n    {\n        if (this.IsEnabled()) { WriteEvent(2, pictureUrl, activityID);}\n    }\n    ...\n}</pre>\nAfter defining the event, log these in your application. For example, in our guestbook application, we log the GuestBookEntryAdded event:\n<pre class=\"prettyprint\">GuestBookEventSource.Log.GuestBookEntryAdded(\n    entry.GuestName, GuestBookEventSource.CurrentThreadActivityId);</pre>\nOnce you are logging the events in your code, configure diagnostics for your Role by right clicking on the Role and selecting <b>Properties</b>. On the <b>Configuration</b> property page make sure <b>Enable Diagnostics</b> is checked and click the <b>Configure…</b> button.\n\nOn the <b>Diagnostics configuration</b> dialog go to the <b>ETW Logs</b> tab and select <b>Enable transfer of ETW logs</b>. Add the appropriate event sources to transfer by specifying the event source name and clicking on the <b>Add Event Source</b> button. Once added, configure additional properties like the storage location for the logs, the log level, any keyword filters and transfer frequency.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/Diagnostics1.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Diagnostics1\" alt=\"Diagnostics1\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Diagnostics1_thumb.png\" width=\"610\" height=\"454\" border=\"0\" /></a>\n\nOnce you deploy your Cloud Service, you’ll get a high-level diagnostics overview. To view diagnostics data for a role, right click it and select <b>View diagnostics data</b>. This will display the diagnostics summary page with a new section for ETW Logs. Select the appropriate ETW log table to view corresponding errors.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image004.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image004\" alt=\"clip_image004\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image004_thumb.png\" width=\"610\" height=\"562\" border=\"0\" /></a>\n\nSince the new diagnostics features use the extension model, you can update the diagnostic configuration for the running service after the cloud service is published. To do so, open <b>Server Explorer</b> and right click on the role and select <b>Update Diagnostics</b>.\n<h1>Diagnostics: Configuring crash dumps</h1>\nTo configure crash dumps, go to the <b>Crash Dumps</b> tab on the Diagnostics Configuration dialog. Just add the name of the process for which you want to collect crash dumps, and diagnostics will collect these in a blob container of your choice. By default, the most common processes for cloud roles are pre-selected for crash dump collection.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image006.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image006\" alt=\"clip_image006\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image006_thumb.png\" width=\"610\" height=\"454\" border=\"0\" /></a>\n<h1>Diagnostics: Virtual Machines</h1>\nYou can now collect diagnostics data from Virtual Machines to monitor your application or debug it through trace logs. To enable diagnostics, open Server Explorer (<b>View</b> &gt; <b>Server Explorer</b>) and right-click on the virtual machine, then select <b>Configure…</b>\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image008.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image008\" alt=\"clip_image008\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image008_thumb.jpg\" width=\"429\" height=\"357\" border=\"0\" /></a>\n\nIn the dialog that opens, you’ll see an <b>Installed Extensions</b> section. Click on the drop-down menu in this section, select the <b>Microsoft Monitoring Agent Diagnostics</b> extension and click <b>Add</b>.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image010.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image010\" alt=\"clip_image010\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image010_thumb.png\" width=\"610\" height=\"334\" border=\"0\" /></a>\n\nThis brings up the diagnostics configuration dialog. The settings are exactly the same as we saw in the PaaS scenarios. So you can develop your diagnostics code with ETW EventSource and set the diagnostics configuration in exactly the same way for IaaS VMs. When you finish configuring what you want to log, save your changes and update the configuration to apply your changes to the virtual machine.\n\n<em>One limitation of the diagnostics feature in the 2.5 release is that diagnostics logs are not captured when you debug your application locally in the Compute Emulator. You won’t get any performance counters, IIS logs or event logs. In addition, the logs will not be transferred to Azure storage or development storage for the local debug scenarios. To view application logs while debugging the application locally, use System.Diagnostics.Trace which can display traces in the Compute Emulator. </em>\n<h1>Azure Resource Manager Tooling</h1>\nThe Azure Resource Manager tooling allows you to quickly and efficiently create and deploy resources within resource groups for greater organization and repeatability.  The tooling uses Azure Gallery templates which allow customization and parameterization, reducing costs when moving from one environment to the next.  Get started by creating a deployment project from <b>File-&gt;New Project-&gt; Cloud-&gt; Cloud Deployment Project</b>.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image012.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image012\" alt=\"clip_image012\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image012_thumb.png\" width=\"610\" height=\"423\" border=\"0\" /></a>\n\nOnce you create the project, you will find a list of common Azure Gallery templates. In future releases, more templates will be added for application scenarios that use other Azure features such as networking, storage, virtual machines. Select the template which is closest to the solution you are building.\n\n<b><a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image014.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image014\" alt=\"clip_image014\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image014_thumb.png\" width=\"610\" height=\"458\" border=\"0\" /></a></b>\n<h2>Your Cloud App Solution</h2>\nSelect the <b>Website </b>template from the Azure Gallery to create a solution that contains the ASP.NET Website Project and a new project type – an Azure Resource Manager Deployment project called <b>MyAzureCloudApp.Deployment</b>. The Deployment project includes: a deployment template file (<b>WebSiteDeploy.json</b>), a template parameter definition (<b>WebSiteDeploy.param.dev.json</b>), and a PowerShell script (<b>Publish-AzureResourceGroup.ps1</b>) that can be used to deploy your resources to Azure.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image016.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image016\" alt=\"clip_image016\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image016_thumb.jpg\" width=\"413\" height=\"315\" border=\"0\" /></a>\n\nThe deployment template and parameter files make it easy to work in a cloud lifecycle pattern and treat these files as config as code. Notice a parameter file named *.dev.json is created by default - copying this parameter file and naming it *.test.json or *.staging.json allows for a single template to be used to build out multiple environments.\n\nVisual Studio makes editing these JSON files easy with the built-in JSON editor and includes IntelliSense based on the published JSON schemas.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/image.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"image\" alt=\"image\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image_thumb.png\" width=\"610\" height=\"391\" border=\"0\" /></a>\n<h2>Create Azure Resources</h2>\nThe simplest method to deploy your resources to Azure is to right click on the Deployment Project, and select <b>Deploy &gt; New Deployment…</b>. This will bring up the Deploy to Resource Group dialog.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image018.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image018\" alt=\"clip_image018\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image018_thumb.png\" width=\"500\" height=\"326\" border=\"0\" /></a>\n\nTo create an Azure Resource Group which will contain all of the resources needed for the web application click on the <strong>Resource group</strong> combo box and select <strong>Create New to bring up the Create Resource Group dialog</strong>. Clicking the <strong>Create </strong>button on the <b>Create Resource Group</b> dialog will provision your Azure Resource Group but without any resources yet.\n\nThe Deployment template file (websitedeploy.json) and Template Parameter file (websitedeploy.param.dev.json) specify the details for deployment and provisioning or the resources. The storage account is used for uploading your application package to Azure Resource Manager so it can be included in the deployment of the template. If you don’t already have a storage account, you will need to <a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-create-storage-account/\">create a storage account</a> before continuing.\n\nClicking the <b>Edit Parameters</b> button will bring up a dialog that allows you to specify the website name, web hosting plan name and website location, etc.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image019.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image019\" alt=\"clip_image019\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image019_thumb.png\" width=\"403\" height=\"318\" border=\"0\" /></a>\n\nThe parameter values will be saved back to the <b>WebSiteDeploy.param.dev.json</b> file so the next time you want to deploy this website isn’t necessary to enter this information. Being able to customize and store the local JSON reduces the chance of errors when re-deploying the resources.\n\nOnce all the parameters have been specified and saved, click the <strong>Deploy</strong> button to have your application and resources deployed to Azure! You can see detailed progress in the Output window and can view the resource group and all the deployed resources ion the new and enhanced <a href=\"https://portal.azure.com/\">Azure Portal</a>.\n<h1>QuickStarts</h1>\nQuickStarts provides sample code which demonstrates how to leverage the Azure SDK and other libraries to interact with Azure Services. Find QuickStarts under <b>File -&gt; New Project -&gt; Cloud -&gt; QuickStarts</b>.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/dialog.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"dialog\" alt=\"dialog\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dialog_thumb.png\" width=\"610\" height=\"423\" border=\"0\" /></a>\n\nIn the current release, there are samples which demonstrate how to use Azure Storage (Blobs, Tables, Queues), DocumentDB, Azure Redis Cache Service, Azure Media Services, Azure WebJobs (Blob, Tables, Queues, Service Bus Queues) and Service Bus (Topics, Queues). There are also samples demonstrating how to use the Microsoft Azure Management Libraries (MAML) to programmatically create resources in Azure with C#.\n<h1>WebJobs</h1>\nAzure WebJobs and WebJobs SDK are now Generally Available. To learn more about WebJobs and the WebJobs SDK, get started with the <a href=\"https://aka.ms/webjobs\">Azure WebJobs Recommended Resources</a>.\n\nWe previously added the ability to publish WebJobs from Console or Web projects. In this release, we add Server Explorer support, as well as remote debugging.\n<h2>WebJobs SDK is preinstalled in WebJobs Templates</h2>\nThe WebJobs project templates now automatically include references to the <a href=\"https://go.microsoft.com/fwlink/?LinkID=320976\">WebJobs SDK</a>. During project creation, you specify what type of WebJob is needed:\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image023.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image023\" alt=\"clip_image023\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image023_thumb.jpg\" width=\"610\" height=\"325\" border=\"0\" /></a>\n\nFor on-demand and Scheduled jobs, the files dropped into the project are specific to scheduled or on-demand tasks. The Program.cs file of an on-demand or scheduled job contains code for executing the WebJob explicitly.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image025.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image025\" alt=\"clip_image025\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image025_thumb.jpg\" width=\"610\" height=\"303\" border=\"0\" /></a>\n\nContinuous WebJobs get a different Program.cs file. The continuous template code includes a call to start the WebJob host and block it from exiting.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image027.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image027\" alt=\"clip_image027\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image027_thumb.jpg\" width=\"610\" height=\"303\" border=\"0\" /></a>\n\nLikewise, the code in the Functions.cs file that is dropped into Continuous WebJob projects includes some of the WebJobs SDK-enabled attributes used for watching Azure Storage Queues.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image029.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image029\" alt=\"clip_image029\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image029_thumb.jpg\" width=\"610\" height=\"300\" border=\"0\" /></a>\n<h2>WebJobs Server Explorer Features</h2>\nWebJobs appear under the corresponding Website in Server Explorer and are grouped according to their run mode.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image031.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image031\" alt=\"clip_image031\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image031_thumb.jpg\" width=\"489\" height=\"520\" border=\"0\" /></a>\n\nEach WebJob Server Explorer node exposes context menu gestures for added functionality. Getting to a WebJob’s dashboard is as easy as a single menu-click. Developers can also elect to run on-demand or Scheduled WebJobs using the context menu gesture.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image033.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image033\" alt=\"clip_image033\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image033_thumb.jpg\" width=\"610\" height=\"450\" border=\"0\" /></a>\n\nContinuous WebJob nodes also provide a one-click method of getting to an Azure WebJob’s dashboard. Continuous WebJobs can be started or stopped from the context menu, as well.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image035.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image035\" alt=\"clip_image035\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image035_thumb.jpg\" width=\"610\" height=\"507\" border=\"0\" /></a>\n<h2>WebJobs Remote Debugging</h2>\nWe’ve also added Remote Debugging support for continuous WebJobs. Once a Continuous WebJob has started, the Attach Debugger gesture is visible via the context menu of the Continuous WebJob’s node.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image037.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image037\" alt=\"clip_image037\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image037_thumb.jpg\" width=\"610\" height=\"445\" border=\"0\" /></a>\n\nBy placing a breakpoint in the code of a Continuous WebJob and attaching the debugger, the code can be stepped through and debugged as though it were running locally in Visual Studio.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image039.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image039\" alt=\"clip_image039\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image039_thumb.png\" width=\"610\" height=\"274\" border=\"0\" /></a>\n<h1>Storage Explorer</h1>\nBlob folders allow you to easily segment groups of blobs into logical units – this is particularly useful if you’re using one blob container to store all your information. These blob folders are just a prefix for the blob name delimited with the <b>/</b> character. For example, if you have a <b>file.png</b> blob inside a <b>pictures</b> folder, the URL for that blob will be in the format <span style=\"text-decoration: underline\">https://&lt;storageaccountname&gt;.blob.core.windows.net/&lt;blobcontainername&gt;/<b>pictures/file.png</b></span>\n\nStarting with this release, you can see and navigate through folders in Azure blob containers from Visual Studio. Navigate through folders by double-clicking on a folder to go inside it, and using the up arrow to go up a level.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image041.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image041\" alt=\"clip_image041\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image041_thumb.png\" width=\"610\" height=\"208\" border=\"0\" /></a>\n\nAdditionally, you can create folders when uploading a blob to Azure Storage using the upload button.\n<h1>HDInsight Server Explorer and Hive Query Support</h1>\nNow the SDK includes tools in Server Explorer that make you more productive working with your Big Data using HDInsight’s hosted Hadoop services and using Hive to query your datasets.\n\nLike any other Azure service, you can browse the HDInsight resources in your subscription and do common dev-test tasks.  You can use the Server Explorer to easily browse your Hive tables, examine schemas, and even query the first 100 rows of a table.  This helps you understand the shape of the data you are working with.\n\nAlso, there is tooling to create Hive queries and submit them as jobs. Use the context menu against a Hadoop cluster to immediately begin with “Write a Hive Query” for quick scripts. The Job Browser tool helps you visualize the job submissions and status.  Double click on any job to get a summary and details in the Hive Job Summary window.  In the example below, we query the table with geographic info to find the count of all countries and then sort by country.\n\nLast, the backing blob storage used by HDInsight is listed in the explorer.  You can navigate to any blob container and open it to work with files. The backing store is associated with the Hadoop cluster during cluster creation in the Azure dashboard. Management of the Hadoop cluster is still performed in the same Azure dashboard.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/clip_image002.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image002\" alt=\"clip_image002\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image002_thumb.jpg\" width=\"610\" height=\"367\" border=\"0\" /></a>\n\nFor more complex script development and lifecycle management you can create Hive projects within Visual Studio. In the new project dialog (see below) you will find a new HDInsight Template category. A helpful starting point is the Hive Sample project type. This project is pre-populated with a more complex Hive query and sample data for the case of processing web server logs.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/clip_image0041.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image004[1]\" alt=\"clip_image004[1]\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image0041_thumb.png\" width=\"610\" height=\"423\" border=\"0\" /></a>\n<h1>Visual Studio 2015 Preview</h1>\nAzure SDK 2.5 is the first supported Azure SDK for the Visual Studio 2015 Preview. In addition to the Visual Studio 2013 features above, Visual Studio 2015 Preview introduces the following capabilities.\n<h1>Sign-in with multiple accounts</h1>\nSign into Visual Studio 2015 Preview with an account that is also associated with your Azure Subscription, and you will automatically be signed into Azure. Server Explorer will display your Azure resources. There is no longer the need to sign in twice with the same account!\n\nYou can now also sign in simultaneously with multiple accounts. As an example, you can sign in with your Microsoft Account associated with an MSDN subscription and simultaneously sign in with your organization account for your company’s subscription. To sign in with another account, right click on the Azure node in Server Explorer and choose <b>Manage Subscriptions. </b>This will bring up the Manage Microsoft Azure Subscriptions dialog where you see all the Accounts that you have added to Visual Studio. To add a new account simply click on the Add an account link.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image043.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image043\" alt=\"clip_image043\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image043_thumb.png\" width=\"500\" height=\"360\" border=\"0\" /></a>\n\nYou can also uncheck accounts, subscriptions, regions or certificates in this dialog to filter the associated resources in Server Explorer.\n\nNote: Another nice improvement to sign-in capabilities is the ability to view your SQL Databases in Server Explorer without the need to import a certificate. This particular feature is also available in Visual Studio 2013 Update 4. Simply sign into your Azure account and view your SQL Databases in Server Explorer.\n<h1>Add Connected Services</h1>\nThe new Add Connected Service dialog in Visual Studio 2015 enables you to easily connect your application to Azure Storage, Azure Mobile Services, Office 365, and Salesforce. You can also set up Azure Active Directory single sign on.\n\nTo add a connection to Azure Storage from an ASP.NET Web application, right click on the References node and select <b>Add Connected Service…</b>\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image045.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image045\" alt=\"clip_image045\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image045_thumb.jpg\" width=\"436\" height=\"379\" border=\"0\" /></a>\n\nIn the Add Connected Service dialog, select <b>Azure Storage</b> from the list of service providers and click <b>Configure</b>.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image047.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image047\" alt=\"clip_image047\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image047_thumb.png\" width=\"610\" height=\"400\" border=\"0\" /></a>\n\nIn the subsequent Azure Storage dialog, you will see a list of storage accounts available to you from your various subscriptions. Choose an existing storage account or provision a new one. After selecting an account, click <b>Add </b>to connect to that storage account from your application.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image049.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image049\" alt=\"clip_image049\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image049_thumb.png\" width=\"610\" height=\"419\" border=\"0\" /></a>\n\nThe dialog will add Azure Storage references using the latest Storage NuGet package and a connection string for your selected storage account in web.config. You then see a Getting Started page to illustrating next steps for using Azure Storage. Revisit the Getting Started page by right clicking on the <b>GettingStarted.html</b> file in Solution Explorer and choosing <b>View in Browser</b>.\n\nSend us feedback by clicking on the Send a Smile icon in the Add Connected Services dialog. We’d love to hear any feedback.\n<h1>Enterprise Single Sign On </h1>\nA common task for business application is to configure the application for enterprise single sign on using Azure Active Directory. You can now do this easily at any point during the construction of your application by right clicking on your application and selecting <b>Configure Azure AD Authentication</b>. This will bring up a wizard similar to the Add Connected Service experience to guide you through the process of configuring your application to work with Active Directory. Specifying an Active Directory Domain in the wizard will register your application with that Active Directory and configure your application to prompt for sign in. Registering your application in a domain is a great way to get started in a dev-test environment. You can easily reconfigure the application’s config files to use other domains as you move from one environment to the next in the application’s lifecycle. You can find out more about this feature in the <a href=\"https://channel9.msdn.com/Events/Visual-Studio/Connect-event-2014/411\" title=\"Azure Active Directory Overview\">Azure Active Directory Overview</a> video.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/12/foo.png\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/foo-537x369.png\" alt=\"Configure Azure AD Authentication\" width=\"537\" height=\"369\" class=\"alignnone size-medium wp-image-219253\" style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" /></a>\n\n<h1>Microsoft Code Analysis for Azure Preview</h1>\nThe .NET Compiler Platform in Visual Studio 2015 Preview provides new code analysis capabilities which detect code issues in real time as you write your code. Leveraging these capabilities, we have put together a small set of code analysis rules for Azure available through the Microsoft Code Analysis for Azure NuGet package. These rules identify issues in your code and when possible recommend automatic fixes.\n\nTo install the package, right click your solution and choose <b>Manage NuGet Packages for Solution.</b> Make sure <b>Include Prerelease</b> checkbox is checked and Search for <b>Azure Code Analysis</b>.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image051.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image051\" alt=\"clip_image051\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image051_thumb.png\" width=\"610\" height=\"96\" border=\"0\" /></a>\n\nThis should find the <b>Microsoft.VisualStudio.Azure.CodeAnalysis</b> package<b>.</b> Select projects in your solution and click <b>Install</b> to enable code analysis for those projects. Once an analyzer is added to the project, code analysis is always running. To run code analysis on the entire solution, build the solution. Any code analysis warnings or errors will automatically show up in the error list as you are make edits to a source file.\n\nAs you code, any line which has an issue will display a red (for errors) or green (for warning) underline. Hover over the underlined code to get more information. Click on the light bulb next to the issue to get additional details on fixes. For example, the screenshot below shows a code issue with the Run() method of a worker role being declared as async. This is a common scenario where you might want to perform some asynchronous operations in a worker role. However, declaring the Run() method itself as async will cause the role to restart in an infinite loop. We detect the issue and through the light bulb menu offer an automatic fix which will refactor the Run() method moving any async operations to another method.\n\n<b><a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/clip_image053.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image053\" alt=\"clip_image053\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image053_thumb.png\" width=\"610\" height=\"206\" border=\"0\" /></a></b>\n\nNot all code issues have automatic fixes. If we can’t provide an automatic fix, the light bulb menu will point you to documentation describing how to fix the issue.\n\nThe code analysis rules provided in the NuGet package are just an initial set of rules designed to showcase the code analysis capabilities in the new .NET compiler. As we receive feedback, we will provide more rules and continue to iterate on the experience.\n<h1>ASP.NET 5.0 Publish</h1>\nYou can publish ASP.NET 5.0 (vNext) projects by right-clicking the project and selecting <b>Publish</b>. New in this release, the Preview tab is now enabled so you can see which files are about to be uploaded:\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/09/Publish1.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Publish1\" alt=\"Publish1\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Publish1_thumb.png\" width=\"610\" height=\"479\" border=\"0\" /></a>\n<h1>Summary</h1>\nAzure SDK 2.5 and Visual Studio 2015 Preview make it easier than ever to get started developing rich cloud applications. Along with the Azure Developer Center’s growing set of .NET developer resources, today’s releases should make your development experience more enjoyable and efficient. Please make sure to see the <a href=\"https://msdn.microsoft.com/en-us/library/azure/dn873976.aspx\">Azure SDK 2.5 release notes</a> for information about breaking changes from previous versions and known issues with the preview features.\n\nIf you don’t already have an Azure account, you can sign-up for a free trial and start using all of the above features today. You can then visit the <a href=\"https://azure.microsoft.com/en-us/develop/net/\">Azure Developer Center</a> to learn more about how to build apps with it. There are two ways to get started with the SDK:\n<ul>\n <li><span style=\"text-decoration: underline\">Install the SDK locally</span>: Download for <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs2013AzurePack.appids\">VS 2013</a> | <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs11AzurePack.appids\">VS 2012</a> | <a href=\"https://www.microsoft.com/web/handlers/webpi.ashx/getinstaller/VWDOrVs2015AzurePack.appids\">VS 2015 Preview</a></li>\n <li><span style=\"text-decoration: underline\">VM Image in Azure</span>: The fastest way to get started with Azure SDK 2.5 is by using the image either for Visual Studio 2015 Preview with Azure SDK 2.5 or Visual Studio Community 2013 with Azure SDK 2.5 from the Azure Virtual Machine gallery. Both of these images are available to all Azure customers. If you are a MSDN subscriber, you can also take advantages of additional Visual Studio 2013 images based on Windows 8.1 and Windows Server 2012 which have been updated to Visual Studio Update 4 and Azure SDK 2.5</li>\n</ul>\n<h1>Credits</h1>\n<i>This blog article is a collaboration of multiple people. Big thanks to Saurabh Bhatia and the Azure Cloud Tools team.</i>"
}