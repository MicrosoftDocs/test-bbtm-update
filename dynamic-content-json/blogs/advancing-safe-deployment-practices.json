{
    "Slug": "advancing-safe-deployment-practices",
    "Title": "Advancing safe deployment practices",
    "Summary": "When running IT systems on-premises, you might try to ensure perfect availability by having gold-plated hardware, locking up the server room and throwing away the key. Software wise, IT would traditionally prevent as much change as possible – avoiding applying updates to the OS and/or applications because they’re too critical, and pushing back on change requests from users.",
    "Content": "<p>&quot;What is the primary cause of service reliability issues that we see in Azure, other than small but common hardware failures? Change. One of the value propositions of the cloud is that it&rsquo;s continually improving, delivering new capabilities and features, as well as security and reliability enhancements. But since the platform is continuously evolving, change is inevitable. This requires a very different approach to ensuring quality and stability than the box product or traditional IT approaches &mdash; which is to test for long periods of time, and once something is deployed, to avoid changes. This post is the fifth <a href=\"https://azure.microsoft.com/en-us/blog/tag/advancing-reliability/\" target=\"_blank\">in the series</a> I kicked off in my <a href=\"https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/\" target=\"_blank\">July blog post</a> that shares insights into what we&#39;re doing to ensure that Azure&#39;s reliability supports your most mission critical workloads. Today we&#39;ll describe our <strong>safe deployment practices</strong>, which is how we manage change automation so that all code and configuration updates go through well-defined stages to catch regressions and bugs before they reach customers, or if they do make it past the early stages, impact the smallest number possible. <strong>Cristina del Amo Casado</strong> from our Compute engineering team authored this posts, as she has been driving our safe deployment initiatives.&rdquo; - Mark Russinovich, CTO, Azure</p>\n\n<hr>\n<p>&nbsp;</p>\n\n<p>When running IT systems on-premises, you might try to ensure perfect availability by having gold-plated hardware, locking up the server room and throwing away the key. Software wise, IT would traditionally prevent as much change as possible &mdash; avoiding applying updates to the operating system or applications because they&rsquo;re too critical, and pushing back on change requests from users. With everyone treading carefully around the system, this &lsquo;nobody breathe!&rsquo; approach stifles continued system improvement, and sometimes even compromises security for systems that are deemed too crucial to patch regularly. As Mark mentioned above, this approach doesn&#39;t work for change and release management in a hyperscale public cloud like Azure. Change is both inevitable and beneficial, given the need to deploy service updates and improvements, and given our commitment to you to act quickly in the face of security vulnerabilities. As we can&rsquo;t simply avoid change, Microsoft, our customers, and our partners need to acknowledge that change is expected, and we plan for it. Microsoft continues to work on making updates as transparent as possible and will deploy the changes safely as described below. Having said that, our customers and partners should also design for high availability, consume maintenance events sent by the platform to adapt as needed. Finally, in some cases, customers can take control of initiating the platform updates at a <a href=\"https://www.aka.ms/advancingreliability/4\" target=\"_blank\">suitable time for their organization</a>.</p>\n\n<h2>Changing safely</h2>\n\n<p>When considering how to deploy releases throughout our Azure datacenters, one of the key premises that shapes our processes is to assume that there could be an unknown problem introduced by the change being deployed, plan in a way that enables the discovery of said problem with minimal impact, and automate mitigation actions for when the problem surfaces. While a developer might judge it as completely innocuous and guarantee that it won&#39;t affect the service, even the smallest change to a system poses a risk to the stability of the system, so &lsquo;changes&rsquo; here refers to all kinds of new releases and covers both code changes and configuration changes. In most cases a configuration change has a less dramatic impact on the behavior of a system but, just as for a code change, no configuration change is free of risk for activating a latent code defect or a new code path.</p>\n\n<p>Teams across Azure follow similar processes to prevent or at least minimize impact related to changes. Firstly, by ensuring that changes meet the quality bar before the deployment starts, through test and integration validations. Then after sign off, we roll out the change in a gradual manner and measure health signals continuously, so that we can detect in relative isolation if there is any unexpected impact associated with the change that did not surface during testing. We do not want a change causing problems to ever make it to broad production, so steps are taken to ensure we can avoid that whenever possible. The gradual deployment gives us a good opportunity to detect issues at a smaller scale (or a smaller &lsquo;blast radius&rsquo;) before it causes widespread impact.</p>\n\n<p>Azure approaches change automation, aligned with the high level process above, through a <strong>safe deployment practice (SDP) framework</strong>, which aims to ensure that all code and configuration changes go through a lifecycle of specific stages, where health metrics are monitored along the way to trigger automatic actions and alerts in case of any degradation detected. These stages (shown in the diagram that follows) reduce the risk that software changes will negatively affect your existing Azure workloads.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dfe1ed0f-f1f3-45c7-bd0d-9cb934b15eed.png\"><img alt=\"A diagram showing how the cost and impact of failures increases throughout the production rollout pipeline, and is minimized by going through rounds of development and testing, quality gates, and integration.\" border=\"0\" height=\"463\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bf679ad2-9c14-484f-a30c-6ac44391150e.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"A diagram showing how the cost and impact of failures increases throughout the production rollout pipeline, and is minimized by going through rounds of development and testing, quality gates, and integration.\" width=\"1024\"></a></p>\n\n<p>This shows a simplification of our deployment pipeline, starting on the left with developers modifying their code, testing it on their own systems, and pushing it to staging environments. Generally, this <strong>integration environment</strong> is dedicated to teams for a subset of Azure services that need to test the interactions of their particular components together. For example, core infrastructure teams such as compute, networking, and storage share an integration environment. Each team runs synthetic tests and stress tests on the software in that environment, iterate until stable, and then once the quality results indicate that a given release, feature, or change is ready for production they deploy the changes into the canary regions.</p>\n\n<h2>Canary regions</h2>\n\n<p>Publicly we refer to <strong>canary regions</strong> as &ldquo;Early Updates Access Program&rdquo; regions, and they&rsquo;re effectively full-blown Azure regions with the vast majority of Azure services. One of the canary regions is built with <a href=\"https://docs.microsoft.com/en-us/azure/availability-zones/az-overview\" target=\"_blank\">Availability Zones</a> and the other without it, and both regions form a <a href=\"https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions\" target=\"_blank\">region pair</a> so that we can validate data geo-replication capabilities. These canary regions are used for full, production level, end to end validations and scenario coverage at scale. They host some first party services (for internal customers), several third party services, and a small set of external customers that we invite into the program to help increase the richness and complexity of scenarios covered, all to ensure that canary regions have patterns of usage representative of our public Azure regions. Azure teams also run stress and synthetic tests in these environments, and periodically we execute fault injections or disaster recovery drills at the region or Availability Zone level, to practice the detection and recovery workflows that would be run if this occurred in real life. Separately and together, these exercises attempt to ensure that software is of the highest quality before the changes touch broad customer workloads in Azure.</p>\n\n<h2>Pilot phase</h2>\n\n<p>Once the results from canary indicate that there are no known issues detected, the progressive deployment to production can get started, beginning with what we call our <strong>pilot phase</strong>. This phase enables us to try the changes, still at a relatively small scale, but with more diversity of hardware and configurations. This phase is especially important for software like core storage services and core compute infrastructure services, that have hardware dependencies. For example, Azure offers servers with GPU&#39;s, large memory servers, commodity servers, multiple generations and types of processors, Infiniband, and more, so this enables flighting the changes and may enable detection of issues that would not surface during the smaller scale testing. In each step along the way, thorough health monitoring and extended &#39;bake times&#39; enable potential failure patterns to surface, and increase our confidence in the changes while greatly reducing the overall risk to our customers.</p>\n\n<p>Once we determine that the results from the pilot phase are good, the deployment systems proceed by allowing the change to progress to <strong>more and more regions incrementally</strong>. Throughout the deployment to the broader Azure regions, the deployment systems endeavor to respect Availability Zones (a change only goes to one Availability Zone within a region) and region pairing (every region is &lsquo;paired up&rsquo; with a second region for georedundant storage) so a change deploys first to a region and then to its pair. In general, the changes deploy only as long as no negative signals surface.</p>\n\n<h2>Safe deployment practices in action</h2>\n\n<p>Given the scale of Azure globally, the entire rollout process is completely automated and driven by policy. These declarative policies and processes (not the developers) determine how quickly software can be rolled out. Policies are defined centrally and include mandatory health signals for monitoring the quality of software as well as mandatory &lsquo;bake times&rsquo; between the different stages outlined above. The reason to have software sitting and baking for different periods of time across each phase is to make sure to expose the change to a full spectrum of load on that service. For example, diverse organizational users might be coming online in the morning, gaming customers might be coming online in the evening, and new virtual machines (VMs) or resource creations from customers may occur over an extended period of time.</p>\n\n<p>Global services, which cannot take the approach of progressively deploying to different clusters, regions, or service rings, also practice a version of progressive rollouts in alignment with SDP. These services follow the model of updating their service instances in multiple phases, progressively deviating traffic to the updated instances through Azure Traffic Manager. If the signals are positive, more traffic gets deviated over time to updated instances, increasing confidence and unblocking the deployment from being applied to more service instances over time.</p>\n\n<p>Of course, the Azure platform also has the ability to deploy a change simultaneously to all of Azure, in case this is necessary to mitigate an extremely critical vulnerability. Although our safe deployment policy is mandatory, we can choose to accelerate it when certain emergency conditions are met. For example, to release a security update that requires us to move much more quickly than we normally would, or for a fix where the risk of regression is overcome by the fix mitigating a problem that&rsquo;s already very impactful to customers. These exceptions are very rare, in general our deployment tools and processes intentionally sacrifice velocity to maximize the chance for signals to build up and scenarios and workflows to be exercised at scale, thus creating the opportunity to discover issues at the smallest possible scale of impact.</p>\n\n<h2>Continuing improvements</h2>\n\n<p>Our safe deployment practices and deployment tooling continue to evolve with learnings from previous outages and maintenance events, and in line with our goal of detecting issues at a significantly smaller scale. For example, we have learned about the importance of continuing to enrich our health signals and about using machine learning to better correlate faults and detect anomalies. We also continue to improve the way in which we do pilots and flighting, so that we can cover more diversity of hardware with smaller risk. We continue to improve our ability to rollback changes automatically if they show potential signs of problems. We also continue to invest in platform features that reduce or eliminate the impact of changes generally.</p>\n\n<p>With over a thousand new capabilities released in the last year, we know that the pace of change in Azure can feel overwhelming. As Mark mentioned, the agility and continual improvement of cloud services is one of the key value propositions of the cloud &ndash; change is a feature, not a bug. To learn about the latest releases, we encourage customers and partners to <a href=\"https://www.Azure.com/Updates\" target=\"_blank\">stay in the know at Azure.com/Updates</a>. We endeavor to keep this as the single place to learn about recent and upcoming Azure product updates, including the roadmap of innovations we have in development. To understand the regions in which these different services are available, or when they will be available, you can also <a href=\"https://www.Azure.com/ProductsbyRegion\" target=\"_blank\">use our tool at Azure.com/ProductsbyRegion</a>.</p>\n"
}