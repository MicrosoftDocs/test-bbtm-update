{
    "Slug": "announcing-geospatial-support-in-azure-documentdb",
    "Title": "Announcing Geospatial support in Azure DocumentDB!",
    "Summary": "The latest DocumentDB service update includes support for automatic indexing of geospatial data, as well as SQL support for performing proximity queries stored in DocumentDB.",
    "Content": "<p>We are excited to announce support for <strong>geospatial indexing and querying</strong>&nbsp;in Azure DocumentDB! The latest DocumentDB service update includes support for automatic indexing of geospatial data, as well as SQL support for performing proximity queries stored in DocumentDB. If you download <a href=\"https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/\">version 1.4.0 of the .NET SDK</a>, you&#39;ll also find new types for representing points and polygons, support for creating and enabling spatial indexing on DocumentDB collections, and new LINQ query operators for performing spatial queries. As we described in the &quot;<a href=\"https://www.vldb.org/pvldb/vol8/p1668-shukla.pdf\">Schema Agnostic Indexing with Azure DocumentDB</a>&quot; paper, we designed DocumentDB&rsquo;s database engine to be truly schema agnostic and provide first class support for JSON. The write optimized database engine of DocumentDB now also <strong>natively understands spatial data represented in the&nbsp;<a href=\"https://geojson.org/geojson-spec.html\">GeoJSON</a>&nbsp;standard</strong>.</p>\n\n<h2>Query Geospatial&nbsp;data with SQL</h2>\n\n<p><a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/08/12/Geo-spatial-150-01.png\"><img alt=\"Geo-spatial 150-01\" class=\"alignnone size-medium wp-image-329531\" height=\"369\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Geo-spatial-150-01-548x369.png\" width=\"548\"></a> <strong>&nbsp;</strong> What kinds of queries can you perform with DocumentDB? Try it for yourself&nbsp;at the <a href=\"https://www.documentdb.com/sql/demo#geospatial\">DocumentDB playground</a>! We&#39;ve pre-created a DocumentDB collection in the playground with a scientific dataset containing JSON data about volcanoes. For example, here&#39;s a query that returns all volcanoes&nbsp;within 100 km of Redmond, WA&nbsp;using the built-in function,&nbsp;<strong>ST_DISTANCE</strong>. <strong>Find locations within a certain radius:</strong> <a href=\"https://www.documentdb.com/sql/demo#geospatial\"><img alt=\"GeospatialDistance\" class=\"alignnone size-medium wp-image-329561\" height=\"275\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/GeospatialDistance-636x275.png\" width=\"636\"></a> You can also use<strong>&nbsp;ST_WITHIN</strong>&nbsp;to check if a point lies within a polygon. Commonly polygons are used to represent boundaries like zip codes, state boundaries or natural formations. Again if you include spatial indexing in your indexing policy, then &quot;within&quot; queries will be served efficiently through the index. <strong>Find locations within a polygon boundary:</strong> <a href=\"https://www.documentdb.com/sql/demo#geospatial\"><img alt=\"GeospatialWithin\" class=\"alignnone size-medium wp-image-329541\" height=\"269\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/GeospatialWithin-636x269.png\" width=\"636\"></a> Here&#39;s what one of our customers had to say about the feature: <em>&quot;Having the backend do the heavy lifting of &ldquo;location and distance&rdquo; math married with the power of querying geospatial data via LINQ makes DocumentDB a perfect backend for modern location based applications.&rdquo; - Ryan Groom, Founder, Trekkit.com</em></p>\n\n<h2>&nbsp;</h2>\n\n<h2>How does spatial indexing&nbsp;work in Azure DocumentDB?</h2>\n\n<p>In a nutshell, the geometry is projected from geodetic coordinates onto a 2D plane then&nbsp;divided progressively into cells using a <strong>quadtree</strong>. These cells are mapped to 1D based on the location of the cell within a <strong>Hilbert space filling curve</strong>, which preserves locality of points. Additionally when location data is indexed, it goes through a process known as <strong>tessellation</strong>, i.e. all the cells that intersect a location are identified and stored as keys in the DocumentDB index. At query time, arguments like points and polygons are also tessellated to extract the relevant cell ID ranges, then used to retrieve data from the index. Learn more about this feature <a href=\"https://azure.microsoft.com/en-us/documentation/articles/documentdb-geospatial\">here</a>.</p>\n\n<h2>Get started with the SDKs</h2>\n\n<p>Get started with&nbsp;spatial querying data&nbsp;by downloading version 1.4.0 of the DocumentDB .NET SDK from Nuget <a href=\"https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/\">here</a> or one of the other supported platforms (Node.js, Java, Python or JavaScript) <a href=\"https://msdn.microsoft.com/en-us/library/azure/dn781482.aspx\">here</a>. We also created a <a href=\"https://github.com/Azure/azure-documentdb-net/tree/master/samples/code-samples/Queries.Spatial\">Github project</a> containing code samples for indexing and querying spatial data. If you need any help or have questions, please reach out to us on the&nbsp; <a href=\"https://stackoverflow.com/questions/tagged/azure-documentdb\">developer forums on stack overflow</a> or schedule a 1:1 chat with the DocumentDB engineering team. Stay up-to-date on the latest DocumentDB news and features by following&nbsp;us on Twitter <a href=\"https://twitter.com/DocumentDB\">@DocumentDB</a>.</p>\n"
}