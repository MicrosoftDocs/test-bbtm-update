{
    "Slug": "accelerated-spark-on-gpu-enabled-clusters-in-azure",
    "Title": "Accelerated Spark on GPU-enabled clusters in Azure",
    "Summary": "AZTK lets you to provision on-demand GPU enabled Spark clusters on top of Azure Batch's infrastructure, helping you take your high-performance GPU code and distribute it across your Spark cluster.",
    "Content": "<p>The ability to run Spark on a GPU enabled cluster demonstrates a unique convergence of big data and high-performance computing (HPC) technologies. In the past several years, we&#39;ve seen the GPU market explode as companies all over the world integrate AI and other HPC workflows into their businesses. Tensorflow, a framework designed to utilize GPUs for numerical computation and neural networks has skyrocketed into popularity, a testament to the rise of AI and consequently the demand for GPUs. Simultaneously, the need for big data and powerful data processing engines has never been greater as hundreds of companies start to collect data in the petabyte range.</p>\n\n<p>By providing infrastructure for high performance hardware such as GPUs with big data engines such as Spark, data scientists and data engineers can enable many scenarios that would otherwise be difficult to achieve.</p>\n\n<p>Along with the recent release of our <a href=\"https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes-gpu\" target=\"_blank\">latest GPU SKUs</a>, I&#39;m excited to share that we now support running Spark on a GPU-enabled cluster using the <a href=\"https://github.com/Azure/aztk/\" target=\"_blank\">Azure Distributed Data Engineering Toolkit (AZTK)</a>. In a single command, AZTK allows you to provision on demand GPU-enabled Spark clusters on top of Azure Batch&#39;s infrastructure, helping you take your high performance implementations that are usually single-node only and distribute it across your Spark cluster.</p>\n\n<p>For this release, we have created several additional GPU-enabled Docker images for AZTK, including a python image that comes packaged with Anaconda, Jupyter and PySpark, and a R image that comes packaged with Tidyverse, RStudio-Server and SparklyR.</p>\n\n<ul>\n\t<li><a href=\"https://hub.docker.com/r/aztk/gpu/\" target=\"_blank\">Aztk/gpu:spark2.2.0</a></li>\n\t<li><a href=\"https://hub.docker.com/r/aztk/python/\" target=\"_blank\">Aztk/python:spark2.2.0-python3.6.2-gpu</a></li>\n\t<li><a href=\"https://hub.docker.com/r/aztk/r-base\">aztk/r-base:spark2.1.0-r3.4.1-gpu</a></li>\n</ul>\n\n<p>These images use the <a href=\"https://github.com/NVIDIA/nvidia-docker\" target=\"_blank\">NVIDIA Docker Engine</a> to provide our Docker images access to the host&#39;s GPUs. Because AZTK runs Spark in a completely containerized fashion, users can customize their own GPU Docker images to their specific needs. However, for those users who simply want to run Spark on a GPU-enabled cluster, they can do so without needing to worry about Docker as well. AZTK will automatically pull the appropriate image, giving you GPU access if GPUs are detected on the host machine.</p>\n\n<p>Here&#39;s an example of how you can create a four-node GPU enabled Spark cluster (total of 224GB in memory, four GPUs where one GPU = one-half K80 card, and 24 vCPUs) with AZTK:</p>\n\n<pre class=\"prettyprint\">\n$ aztk spark cluster create --id my_gpu_cluster --size 4 --vm-size standard_nc6</pre>\n\n<p>Since AZTK is aware that the Standard NC6 VMs come with NVIDIA&#39;s Tesla K80s, AZTK automatically selects one of the GPU-enabled Docker images when provisioning your cluster. Alternatively, you can also manually specify which image to use by setting the --docker-repo flag.</p>\n\n<p>We also provide a <a href=\"https://github.com/Azure/aztk/blob/master/node_scripts/jupyter-samples/GPU%2Bvs%2BCPU%2Busing%2BNumba.ipynb\" target=\"_blank\">sample that compares a simple PySpark job</a> using GPUs with Numba vs using CPUs to highlight the performance gain you can get when running your Spark jobs with GPUs.</p>\n\n<p>Whether you will be using Spark with GPUs for AI workflow such as with Tensoflow/Tensorframes, distributed CTNK, or using it simply to speed up your computationally expensive Spark jobs, please let us know about how you plan to take advantage of this unique convergence of HPC and Big Data technologies.</p>\n\n<p>We look forward to you using these capabilities and hearing your feedback. Please contact us at <a href=\"mailto:askaztk@microsoft.com\">askaztk@microsoft.com</a> for feedback or feel free to contribute to our <a href=\"https://www.github.com/Azure/aztk\" target=\"_blank\">Github repository</a>.</p>\n\n<h3>Additional information</h3>\n\n<ul>\n\t<li>Download and get started with the <a href=\"https://www.github.com/azure/aztk\" target=\"_blank\">Azure Distributed Data Engineering Toolkit (AZTK)</a></li>\n\t<li>Please feel free to <a href=\"https://www.github.com/Azure/thunderbolt/issues\" target=\"_blank\">submit issues via Github</a></li>\n</ul>\n\n<h3>Additional resources</h3>\n\n<ul>\n\t<li>See <a href=\"https://www.github.com/Azure/thunderbolt/issues\" target=\"_blank\">Azure Batch</a>, the underlying Azure service used by the Azure Distributed Data Engineering Toolkit</li>\n\t<li><a href=\"https://azure.microsoft.com/en-us/solutions/high-performance-computing\" target=\"_blank\">More general purpose HPC on Azure</a></li>\n</ul>\n"
}