{
    "Slug": "announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk",
    "Title": "Announcing the 0.3.0-beta preview of Microsoft Azure WebJobs SDK",
    "Summary": "This preview of WebJobs SDK adds support for Service Bus and many more new features.",
    "Content": "We are releasing another preview of the Microsoft Azure WebJobs SDK introduced by Scott Hanselman <a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">here</a>. To read more about the previous preview, read this <a href=\"https://blogs.msdn.com/b/webdev/archive/2014/03/27/announcing-0-2-0-alpha2-preview-of-windows-azure-webjobs-sdk.aspx\">post</a>.\n\nThis release has same general feature set as alpha2 and also new features.\n<h3>Download this release</h3>\nYou can download the WebJobs SDK from the NuGet gallery. You can install or update these packages through NuGet gallery using the NuGet Package Manager Console, like this:\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.Jobs –Pre</pre>\nIf you want to use Microsoft Azure Service Bus triggers, install the following package:\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.Jobs.ServiceBus -Pre</pre>\nSince the package names have changed from alpha2, we have uploaded redirection packages which will help you update from alpha2 – beta.\n<pre class=\"prettyprint\">Update-Package Microsoft.WindowsAzure.Jobs –Pre\nUpdate-Package Microsoft.WindowsAzure.Jobs.Host –Pre</pre>\n&nbsp;\n<h3>What is the WebJobs SDK?</h3>\nThe <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">WebJobs</a> feature of Microsoft Azure Web Sites provides an easy way for you to run programs such as services or background tasks in a Web Site. You can upload and run an executable file such as an <i>.exe</i>, <i>.cmd</i>, or <i>.bat</i> file to your web site. You can run these as triggered or continuous WebJobs. Without the WebJobs SDK, connecting and running background task requires a lot of complex programming. The SDK provides a framework that lets you write a minimum amount of code to get common tasks done.\n\nThe WebJobs SDK has a binding and trigger system which works with Microsoft Azure Storage Blobs, Queues and Tables as well as Service Bus. The binding system makes it easy to write code that reads or writes Microsoft Azure Storage objects. The trigger system calls a function in your code whenever any new data is received in a queue or blob.\n<h4>Scenarios for the WebJobs SDK</h4>\nHere are some typical scenarios you can handle more easily with the Azure WebJobs SDK:\n<ul>\n<ul>\n <li>\n<div><b>Image processing</b> or other CPU-intensive work.</div></li>\n <li>\n<div>Other <b>long-running tasks</b> that you want to run in a background thread, such as sending emails. Until now you couldn't do this in ASP.NET because IIS would recycle your app if your app was idle for some time. Now with <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> in Azure Web Sites you can keep the web site from being recycled when the app is idle. <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> ensures that the site does not go to sleep, which means you can run long-running tasks or services using WebJobs and the WebJobs SDK.</div></li>\n <li>\n<div><b>Queue processing</b>. A common way for a web frontend to communicate with a backend service is to use queues. This is a common producer – consumer pattern.</div></li>\n <li>\n<div><b>RSS aggregation</b>. If you have a site that maintains a list of RSS feeds, you could pull in all of the articles from the feeds in a background process.</div></li>\n <li>\n<div><b>File maintenance</b>, such as aggregating or cleaning up log files.</div></li>\n</ul>\n</ul>\n<h4>Goals of the SDK</h4>\n<ul>\n <li>Provide a way to make it easier to use Azure Storage when doing any background processing work.</li>\n <li>The SDK makes it easier to consume Azure Storage within your application. You do not have to deal with writing code to read/ write from storage.</li>\n <li>Provider a rich diagnostics and monitoring experience without having the developer write any diagnostics and logging code.</li>\n</ul>\n<h3>Updates in this preview</h3>\n<h4>Add support for Microsoft Azure Service Bus</h4>\nThe WebJobs SDK now supports Microsoft Azure Service Bus. In the earlier previews you were able to trigger a function on Azure Queues. Now you can use Azure Service Bus Queues and Topics.\n\nFor example, the following code shows how you can use WebJobs SDK to trigger a function on a new message on a Service Bus Queue and write the message to a different Service Bus QueueYou can monitor these functions in the dashboard and run them, abort them and get all the dashboard functionality for Service Bus as you had for Azure Queues.\n\nYou can specify a connectionString called “AzureJobsServiceBus” which points to your ServiceBus connection. Look at our <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt\">samples</a> site for more samples on using Service Bus Queues and Topics\n<pre class=\"prettyprint\">class Program\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void TriggerOnSBQueue(\n        [ServiceBusTrigger(\"inputqueue\")] string inputText,\n        [ServiceBus(\"outputqueue\")] out string outputText)\n    {\n        outputText = inputText;\n    }\n}</pre>\n&nbsp;\n<h4>Made triggers and bindings usage more explicit</h4>\nThe SDK allows you to trigger a function and bind the message to your specified type or to a CLR type such as String, TextReader, TextWriter, and more. In the earlier previews the triggers and bindings usage was specified in the attributes being used on the function parameters. The rules around the attribute usage were not very clear and to avoid confusion we changed the name and usage of the attributes to make triggers and bindings more explicit.\n\nFollowing are the high-level changes.\n<ul>\n <li>\n<div>A Triggered QueueInput is now QueueTrigger, and QueueOutput is now Queue</div></li>\n</ul>\n<strong>Before</strong>\n<pre class=\"prettyprint\">public static void OnQueue(\n    [QueueInput(\"input\")] string message, \n    [QueueOutput(\"output\")] out string newMessage)\n{     \n    newMessage = message;\n}</pre>\n<strong>After</strong>\n<pre class=\"prettyprint\">public static void OnQueue(\n    [QueueTrigger(\"input\")] string message, \n    [Queue(\"output\")] out string newMessage)\n{     \n    newMessage = message;\n}</pre>\n<ul>\n <li>\n<div>A Triggered BlobInput is now BlobTrigger but a BlobInput or BlobOutput is Blob</div></li>\n</ul>\n<strong>Before</strong>\n<pre class=\"prettyprint\">public static void BlobToBlob(\n    [BlobInput(\"input/{name}\")] TextReader input, \n    [BlobOutput(\"output/{name}\")] out string output)\n{\n    output = input.ReadToEnd();\n}</pre>\n<strong>After</strong>\n<pre class=\"prettyprint\">public static void BlobToBlob(\n    [BlobTrigger(\"input/{name}\")] TextReader input, \n    [Blob(\"output/{name}\")] out string output)\n{\n    output = input.ReadToEnd();\n}</pre>\n<h4>Branding changes</h4>\nIn line with the <a href=\"https://azure.microsoft.com/blog/2014/03/25/upcoming-name-change-for-windows-azure/\">branding change</a> to Microsoft Azure we are changing the package name, assembly name, and namespaces to match this branding. Following are the changes needed in your app.\n<table width=\"413\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"234\"><b>Before</b></td>\n<td valign=\"top\" width=\"177\"><b>After</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs.Host</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs.Core</td>\n</tr>\n</tbody>\n</table>\n<h4>Improved function discovery</h4>\nWe added an ITypeLocator and INameResolver to enable customizing how the WebJobs SDK looks for functions. This enables scenarios such as the following:\n<ul>\n <li>\n<div>You can define functions where the QueueName is not explicit. You can read Queue names from a config source and specify this value at runtime.</div></li>\n <li>\n<div>Restrict function discovery to a particular class or assembly.</div></li>\n <li>\n<div>Dynamic functions at indexing time: you can define the function signature at runtime.</div></li>\n</ul>\n<h4>Access to the dequeue count on Queue message</h4>\nWhile the SDK makes it easier to use Azure Queues and covers most of the common usage patterns, there are cases when you want to have access to the low level queues. The SDK now gives you access to some of the commonly used properties of message which may be needed for advanced scenarios. For example, in this sample you can access the dequeueCount of your queue message. Beyond this support the SDK allows you to bind to Azure Storage SDK Queue types.\n<pre class=\"prettyprint\">public static void PropertyBinding(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    int dequeueCount)\n{\n   // Do something with the dequeueCount            \n}</pre>\n<h4>Added support for Cancellation Tokens</h4>\nThe functions can take a CancellationToken parameter in your function and the function can receive a cancellation request from the Host.\n<h4>Added support for WebJobs shutdown notifications</h4>\nWebJobs added support for graceful shutdown. This allows your WebJob to finish executing the function before the WebJob gets stopped. The SDK supports this graceful shutdown in WebJobs by notifying you when the WebJob is shutting down. This information is flowed to the function using the CancellationToken. The following function takes in a CancellationToken which will receive the Cancellation request when the WebJob is stopping.\n<pre class=\"prettyprint\">public static void UseCancellationToken(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log,\n    CancellationToken token)\n{\n      // This is a long running function which can be cancelled  \n      while (!token.IsCancellationRequested)\n      {\n          Thread.Sleep(2000);\n          log.WriteLine(\"Not cancelled\");\n      }\n      log.WriteLine(\"cancelled\");\n}</pre>\n&nbsp;\n<h4>Triggers are now supported on host.Call()</h4>\nYou can now have Triggers on functions which are invoked through host.Call()\n<pre class=\"prettyprint\">class Program\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.Call(typeof(Program).GetMethod(\"TriggerOnQueue\"),\n            new { inputText=\"input\" });\n    }\n\n    public static void TriggerOnQueue(\n    [QueueTrigger(\"inputqueue\")] string inputText)\n    {\n        //Process Queue message\n    }\n}</pre>\n&nbsp;\n<h4>JobHost Configuration</h4>\nIf you want to override the default connectionString names for your Azure Storage and Service Bus accounts, you can do it through the JobHostConfiguration.\n<pre class=\"prettyprint\">static void Main(string[] args)\n{\n    var _storageConn = ConfigurationManager\n        .ConnectionStrings[\"MyStorageConnection\"].ConnectionString;\n\n    var _servicesBusConn = ConfigurationManager\n        .ConnectionStrings[\"MyServiceBusConnection\"].ConnectionString;\n\n    JobHostConfiguration config = new JobHostConfiguration(_storageConn)\n        {\n            ServiceBusConnectionString = _servicesBusConn\n        };\n\n    JobHost host = new JobHost(config);\n    host.RunAndBlock();\n}</pre>\n&nbsp;\n<h4>Updated Azure Storage dependency</h4>\nThe WebJobs SDK will depend on the <a href=\"https://www.nuget.org/packages/WindowsAzure.Storage\">Azure Storage 4.0.1 package</a>.\n<h3>Existing features of the SDK</h3>\nFollowing is the feature set that was supported in alpha2 and continues to be supported in this release.\n<h4>Azure Storage</h4>\nThe SDK works with Azure Blobs, Queues and Tables.\n<h4>Triggers</h4>\nFunctions get executed when a new input is detected on a Queue or a Blob. For example. In the following code ProcessQueue function will be triggered when a new message comes on a queue called “inputqueue”. For more details on triggers please see this <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/01/28/trigger-bindings-and-route-parameters-in-azurejobs.aspx\">post</a>.\n<pre class=\"prettyprint\">public static void ProcessQueue(\n    [QueueTrigger(\"inputqueue\")] string input)\n{\n    // Process the Queue message \n}</pre>\n&nbsp;\n<h3>Bindings</h3>\nThe SDK supports binding to provides model binding between C# primitive types and Azure storage like Blobs, Tables, and Queues. This makes it easy for a developer to read/ write from Blobs, Tables and Queues as they do not have to learn about the code around reading/ writing from Azure Storage.\n\nThe following Bindings are currently supported: <b>Stream, TextReader/Writer, and String. </b>You can add support for binding to your custom types and other types from the Storage SDK as well.\n\nFor more details on how Bindings work against Azure Storage, please read <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/18/azure-storage-bindings-part-1-blobs.aspx\">Blobs</a><b>, </b><a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/18/azure-storage-bindings-part-2-queues.aspx\">Queues</a><b> </b>and <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/03/06/azure-storage-bindings-part-3-tables.aspx\">Tables</a>\n<h4>Hosting</h4>\nA JobHost is an execution container which knows what functions you have in your program. A JobHost object (which lives in <a href=\"https://www.nuget.org/packages/Microsoft.Azure.Jobs\">Microsoft.Azure.Jobs</a> ) reads the bindings, listens on the triggers, and invokes the functions. In the following example, you create an instance of JobHost and call RunAndBlock(), which will cause the JobHost to listen for any triggers on any functions that you define in this Host.\n<pre class=\"prettyprint\">static void Main(string[] args)\n{\n    JobHost host = new JobHost();\n    host.RunAndBlock();\n}</pre>\n&nbsp;\n<h4>Dashboard for monitoring WebJobs.</h4>\nAs WebJobs (<b><i>written in any language and of any type</i></b>) execute, you can monitor them in real time. You can see their state (Running, Stopped, Successfully completed), last run time and the logs of a particular execution. The following screenshot shows you a view of all WebJobs running in your Website.\n\n<img style=\"border: 0px;\" title=\"Azure WebJobs Beta\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AllTypesOfWebJobs.png\" width=\"610\" height=\"308\" border=\"0\" />\n<h4>Function execution details</h4>\nWhen you are monitoring a particular execution of this “ImageProcessing” WebJob, you can view invocation details about the functions in the program such as:\n<ul>\n<ul>\n <li>\n<div>The parameters of this function.</div></li>\n <li>\n<div>How much time it took for the function to execute.</div></li>\n <li>\n<div>How much time it took to read from a Blob and how many bytes were read/ written.</div></li>\n</ul>\n</ul>\n<img style=\"border: 0px;\" title=\"Azure WebJobs Beta\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/new_details.png\" width=\"610\" height=\"478\" border=\"0\" />\n\nFollowing is the code for this ImageProcessing WebJob\n<pre class=\"prettyprint\">public class ImageProcessing\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void Resize(\n        [BlobTrigger(@\"images-input/{name}\")] WebImage input,\n        [Blob(@\"images2-output/{name}\")] out WebImage output)\n    {\n        var width = 80;\n        var height = 80;\n        output = input.Resize(width, height);\n    }\n\n    public static void WaterMark(\n        [BlobTrigger(@\"images2-output/{name}\")] WebImage input,\n        [Blob(@\"image2-output/{name}\")] out WebImage output)\n    {\n        output = input.AddTextWatermark(\"WebJobs\", fontSize: 6);\n    }\n}\n\npublic class WebImageBinder : ICloudBlobStreamBinder&lt;WebImage&gt;\n{\n    public WebImage ReadFromStream(System.IO.Stream input)\n    {\n        return new WebImage(input);\n    }\n\n    public void WriteToStream(WebImage result, System.IO.Stream output)\n    {\n        var bytes = result.GetBytes();\n        output.Write(bytes, 0, bytes.Length);\n    }\n}</pre>\n&nbsp;\n<h4>Invoke &amp; Replay</h4>\nIn the above example if the Resize function fails for some reason, you can upload a new image and Replay Resize function, which will trigger the execution chain and call Watermark function as well. This is useful to diagnose and debug an issue when you have a complicated graph for chaining functions together. You can also run a function from the dashboard.\n<h4>Causality of functions</h4>\nIn the above example, we know that when the Resize function writes to a Blob, it will trigger the WaterMark function. The dashboard will show this causality between functions. If you have chained lots of functions which will get triggered as new inputs are detected then it can be useful to see this causality graph.\n<h4>Search Blobs</h4>\nYou can click on Search for a Blob and get information on what happened to that Blob. For example, in the case of the ImageProcessing, the Blob was written because the Resize function got executed. For more details on Search Blobs see this <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/19/who-wrote-that-blob.aspx\">post</a>.\n<h3>Samples</h3>\nSamples for WebJobs SDK can be found at <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt\">https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt</a>\n<ul>\n<ul>\n <li>\n<div>You can find samples on how to use triggers and bindings for Blobs, Tables, Queues and Service Bus.</div></li>\n <li>\n<div>There is a sample called PhluffyShuffy which is an Image processing Website where a customer can upload pictures which will trigger a function to process those pictures from Blob storage.</div></li>\n</ul>\n</ul>\n<h3>Documentation</h3>\n<ul>\n<ul>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs\">Tutorial: Getting Started with the Windows Azure WebJobs SDK</a></li>\n <li><a href=\"https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK\">Channel 9 video on Making Your Jobs Easier With Windows Azure WebJobs SDK</a></li>\n <li><a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Introduction to WebJobs and SDK by Scott Hanselman</a></li>\n <li>A web site monitor built using WebJobs and ASP.NET by <a href=\"https://twitter.com/bradygaster\">Brady Gaster</a></li>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources\">Azure WebJobs - Recommended Resources </a></li>\n</ul>\n</ul>\n<h3>Deploying WebJobs with SDK</h3>\nIf you don't want to use the WebJobs portal page to upload your programs, you can use FTP, Git, or Web Deploy. For more information, see How to deploy Azure WebJobs and Git deploying a .NET console app to Azure using WebJobs\n\nIf you want to deploy your WebJobs along with your Websites, check out the following Visual Studio <a href=\"https://visualstudiogallery.msdn.microsoft.com/f4824551-2660-4afa-aba1-1fcc1673c3d0\">extension</a>.\n<h3>Known Issues when migrating from 0.2.0-alpha2 to 0.3.0-beta</h3>\n<h4>Update namespaces to match new APIs</h4>\n&nbsp;\n<table width=\"413\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"234\"><b>Before</b></td>\n<td valign=\"top\" width=\"177\"><b>After</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs.Host</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs.Core</td>\n</tr>\n</tbody>\n</table>\n<h4>Update connectionString names</h4>\nWhen you are setting the connectionStrings, in the app.config of your WebJob or in “Configure Tab” in your Microsoft Azure Web sites, you will have to change the connectionString names to match the names in 0.3.0-beta\n<table width=\"401\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"200\"><b>Before</b></td>\n<td valign=\"top\" width=\"199\"><b>After</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"200\">AzureJobsData</td>\n<td valign=\"top\" width=\"199\">AzureJobsStorage</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"200\">AzureJobsRuntime</td>\n<td valign=\"top\" width=\"200\">AzureJobsDashboard</td>\n</tr>\n</tbody>\n</table>\n<h4>Bindings for Tables</h4>\nIn this release we have dropped support for IDictionary&lt;Tuple,Tuple&gt; bindings for Azure Table Storage. You can use CloudTableEntity to bind to tables. The following example shows the difference and how you can bind to Azure Tables. For a more complete example please see the <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/BasicSamples/TableOperations/Program.cs\">table usage on samples site</a>.\n\n<strong>Before</strong>\n<pre class=\"prettyprint\">public static void CountAndSplitInWords(\n    [QueueInput] string textInput, \n    [Table] IDictionary&lt;Tuple&lt;string, string&gt;, WordCount&gt; words) \n{ \n}</pre>\n<strong>After</strong>\n<pre class=\"prettyprint\">public static void CountAndSplitInWords(\n    [QueueTrigger(\"textInput\")] string textInput, \n    [Table(\"words\")] CloudTable wordsTable) \n{ \n}</pre>\n&nbsp;\n<h4>Logging</h4>\nIf you want to write any logging information then you can use Console.Write(). These logs will show up in the dashboard when you are viewing the WebJob details\n\nIf you want to do any function level logging you should use TextWriter which will log any information into Blob storage. These logs will show up in the dashboard when you see the function execution details.\n<pre class=\"prettyprint\">public static void Logging(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log)\n{\n   log.WriteLine(inputText);\n}</pre>\n&nbsp;\n<h4>Dashboard will only work for WebJobs deployed with 0.3.0-beta</h4>\nIf you had a WebJob deployed with 0.2.0-alpha2 of SDK and, if you access the dashboard to see the logs for the WebJob, then you will see a warning about “Host not running”. This happens because as part of this release a newer version of the dashboard gets deployed to all Azure Websites. The new dashboard has some protocol changes which are not compatible with 0.2.0-alpha2. To work around this error, please update your WebJob to use 0.3.0-beta NuGet package and redeploy your WebJob.\n<h3>Give feedback and get help</h3>\nThe <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">WebJobs</a> feature of Microsoft Azure Web Sites and the Microsoft Azure WebJobs SDK are in preview. Feedback will be considered in changes we make to future versions.\n\nIf you have questions that are not directly related to the tutorial, you can post them to the <a href=\"https://azure.microsoft.com/en-us/support/forums/\">Azure forum</a>, the <a href=\"https://forums.asp.net/1247.aspx\">ASP.NET forum</a>, or <a href=\"https://stackoverflow.com/\">StackOverflow.com</a>. Use <a href=\"https://twitter.com/search?q=AzureWebJobs\">#AzureWebJobs</a> for Twitter and the tag Azure-WebJobsSDK for StackOverflow."
}