{
    "Slug": "announcing-hyperlapse-for-azure-media-services",
    "Title": "Announcing Hyperlapse for Azure Media Services",
    "Summary": "Today marks the beginning of our free public preview of Hyperlapse for Azure Media Services!  ",
    "Content": "<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">As of March 28, 2019, the Hyperlapse Preview for Azure Media Services is no longer available. Learn more about the latest <a href=\"https://azure.microsoft.com/en-us/services/media-services/\">Azure Media Services updates</a>.</div>\n\n<p>The Media Hyperlapse Preview feature of Azure Media Services will soon be retired. Starting December 19, 2018, we will no longer make changes or improvements to Media Hyperlapse, and on March 29, 2019, it will be retired and no longer available. Although we&rsquo;re retiring this feature, <a href=\"https://docs.microsoft.com/en-us/azure/media-services/\" target=\"_blank\">Media Services</a> will still be available for cloud-based video encoding, streaming, and indexing services.</p>\n\n<p>For any content you&rsquo;ve already processed using Media Hyperlapse, the resulting output videos will continue to be available in your Azure Media Services account. We apologize for any inconvenience this change may cause.</p>\n\n<p>If you have questions, <a href=\"mailto:amshelp@microsoft.com\">please contact us</a>.</p>\n\n<p>&nbsp; Over the past five years, the introduction of drone cameras and action cameras have massively disrupted the landscape of video capture devices.&nbsp; Increasingly smaller lenses and camera hardware, in conjunction with the rise of social media and multimedia sharing opened the door for amateur videographers everywhere.&nbsp; Now, one can affordably take high framerate and field-of-view footage of their action sports, as well to take their cameras to the skies and capture previously impossible shots to immediately share with the world. With this technology, however, came new challenges.&nbsp; For example, as a news organization with a fleet of drones covering a major event, how does one properly condense the long, sometimes boring catalog of slow-moving video into something usable and exciting?&nbsp; When recording a 15 minute downhill mountain bike ride, how does one create a consumable and sharable version of the footage? These past few months we have been working closely with our peers in Microsoft Research to answer this problem by bringing Microsoft Hyperlapse to the cloud on Azure Media Services.&nbsp; Today marks the beginning of our <strong>free public preview of Hyperlapse for Azure Media Services! </strong> This release is in conjunction with&nbsp; <a href=\"https://news.microsoft.com/?p=188061\">Hyperlapse Mobile and Hyperlapse Pro</a>, and is focused on offering Microsoft Hyperlapse as a service to developers and media companies.&nbsp; Microsoft Hyperlapse is now available in all&nbsp;public Azure Datacenters! &nbsp;</p>\n\n<h2>What is Microsoft Hyperlapse?</h2>\n\n<p>Microsoft Hyperlapse is a result of over 20 years of computer vision research at MSR, combining video stabilization and time lapsing to create quick, consumable, beautiful videos from your long-form content. Want to share helmet-cam footage of a snowboarding run?&nbsp; Use Microsoft Hyperlapse to smooth out the bumps with video stabilization and speed up your content into a consumable clip, without losing any of the action!&nbsp; Microsoft Hyperlapse gives your content the polished feel of a professionally-recorded run with specialized stabilization hardware/cameras. Take a look at the following videos (in <a href=\"https://aka.ms/ampblog\">Azure Media Player</a>) demonstrating the smooth experience you can expect from Microsoft Hyperlapse. &nbsp;</p>\n\n<p>Microsoft Hyperlapse generates smooth timelapses. In particular pay attention to the trees in the normal time lapse in comparison with those in the Hyperlapse video.&nbsp; Traditional time lapse technology accentuates the jerks and bumps of amateur videography, but with Hyperlapse we can process away the motion into the smooth end result you see here. Hyperlapse for Azure Media Services is the integration of Microsoft Hyperlapse technology into a <a href=\"https://azure.microsoft.com/en-us/documentation/articles/media-services-get-media-processor/\">media processor</a> on Azure Media Services.&nbsp; We invite you all to take advantage of the synergy between this incredible technology and the ultrascale and global presence of the Azure cloud by trying out Hyperlapse today! With Azure Media Services, you can schedule scalable batch processing of your Hyperlapse tasks, parallelizing as many jobs as you need by virtually scaling up your hardware! &nbsp;</p>\n\n<h2>Free Public Preview</h2>\n\n<p>For the purposes of this public preview offering, we are offering Microsoft Hyperlapse to <strong>all Azure Media Services accounts for free</strong>!</p>\n\n<blockquote>Note: We will be limiting hyperlapse jobs to 10,000 frames of video during preview.</blockquote>\n\n<h2>Getting Started</h2>\n\n<p>Easily integrate Hyperlapse technology into your web or app offering using our <a href=\"https://azure.microsoft.com/en-us/develop/media-services/\">REST API/SDKs</a> or with <a href=\"https://aka.ms/amse\">Azure Media Services Explorer</a>, today! The following is a sample C# program and configuration XML that will get you started with your first Hyperlapse job.&nbsp; This code requires both the <a href=\"https://github.com/Azure/azure-sdk-for-media-services\">Azure Media Services C# SDK</a> and <a href=\"https://github.com/Azure/azure-sdk-for-media-services-extensions\">SDK Extensions</a> packages (available on NuGet). &nbsp;</p>\n\n<h3>Sample Program</h3>\n\n<pre class=\"prettyprint\">\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing Microsoft.WindowsAzure.MediaServices.Client;\nusing System.Configuration;\nusing System.IO;\nusing System.Threading;\n\n\nnamespace MyFirstHyperlapseJob\n{\n    class Program\n    {\n        \n        // declare constants and globals\n        private static CloudMediaContext _context = null;\n        private static readonly string _accountName = {ACCOUNT_NAME};\n        private static readonly string _accountKey = {ACCOUNT_KEY};\n\n        private const string _mpName = &quot;Azure Media Hyperlapse&quot;;\n        private static readonly string _inputFile = {INPUT_FILE_PATH};\t\n\tprivate static readonly string _outputFolder = {OUTPUT_FOLDER_PATH};\n        private const string _hyperlapseConfiguration = {PATH_TO_CONFIG};\n\n        static void Main(string[] args)\n        {\n            _context = new CloudMediaContext(_accountName, _accountKey);\n            RunHyperlapseJob(_inputFile, _outputFolder, _hyperlapseConfiguration);\n        }\n\n        static void RunHyperlapseJob(string input, string output, string hyperConfig)\n        {\n            // create asset with input file\n            IAsset asset = _context\n                           .Assets\n                           .CreateFromFile(input, AssetCreationOptions.None);\n\n            // grab instance of Azure Media Hyperlapse MP\n            IMediaProcessor mp = _context\n                                 .MediaProcessors\n                                 .GetLatestMediaProcessorByName(_mpName);\n\n            // create Job with hyperlapse task\n            IJob job = _context\n                       .Jobs\n                       .Create(String.Format(&quot;Hyperlapse {0}&quot;, input));\n\n            if (!String.IsNullOrEmpty(hyperConfig))\n            {\n                hyperConfig = File.ReadAllText(hyperConfig);\n            }\n            ITask hyperlapseTask = job.Tasks.AddNew(&quot;Hyperlapse task&quot;, \n                                                    mp,\n                                                    hyperConfig, \n                                                    TaskOptions.None);\n            hyperlapseTask.InputAssets.Add(asset);\n            hyperlapseTask.OutputAssets.AddNew(&quot;Hyperlapse output&quot;, \n                                                AssetCreationOptions.None);\n\n\n            job.Submit();\n\n            // Create progress printing and querying tasks\n                Task progressPrintTask = new Task(() =&gt;\n                {\n\n                    IJob jobQuery = null;\n                    do\n                    {\n                        var progressContext = _context;\n                        jobQuery = progressContext.Jobs\n                                                  .Where(j =&gt; j.Id == job.Id)\n                                                  .First();\n                        Console.WriteLine(string.Format(&quot;{0}\\t{1}\\t{2}&quot;, \n                                          DateTime.Now, \n                                          jobQuery.State, \n                                          jobQuery.Tasks[0].Progress));\n                        Thread.Sleep(10000);\n                    }\n                    while (jobQuery.State != JobState.Finished &amp;&amp;\n                           jobQuery.State != JobState.Error &amp;&amp;\n                           jobQuery.State != JobState.Canceled);\n                });\n                progressPrintTask.Start();\n\n                Task progressJobTask = job.GetExecutionProgressTask(\n                                                     CancellationToken.None);\n                progressJobTask.Wait();\n\n                // If job state is Error, the event handling \n                // method for job progress should log errors.  Here we check \n                // for error state and exit if needed.\n                if (job.State == JobState.Error)\n                {\n                    ErrorDetail error = job.Tasks.First().ErrorDetails.First();\n                    Console.WriteLine(string.Format(&quot;Error: {0}. {1}&quot;, \n                                                    error.Code, \n                                                    error.Message));                    \n                }\n\n            DownloadAsset(job.OutputMediaAssets.First(), output);\n        }\n\n        static void DownloadAsset(IAsset asset, string outputDirectory)\n        {\n            foreach (IAssetFile file in asset.AssetFiles)\n            {\n                file.Download(Path.Combine(outputDirectory, file.Name));\n            }\n        }\n\n        // event handler for Job State\n        static void StateChanged(object sender, JobStateChangedEventArgs e)\n        {\n            Console.WriteLine(&quot;Job state changed event:&quot;);\n            Console.WriteLine(&quot;  Previous state: &quot; + e.PreviousState);\n            Console.WriteLine(&quot;  Current state: &quot; + e.CurrentState);\n            switch (e.CurrentState)\n            {\n                case JobState.Finished:\n                    Console.WriteLine();\n                    Console.WriteLine(&quot;Job finished.&quot;);\n                    break;\n                case JobState.Canceling:\n                case JobState.Queued:\n                case JobState.Scheduled:\n                case JobState.Processing:\n                    Console.WriteLine(&quot;Please wait...\\n&quot;);\n                    break;\n                case JobState.Canceled:\n                    Console.WriteLine(&quot;Job is canceled.\\n&quot;);\n                    break;\n                case JobState.Error:\n                    Console.WriteLine(&quot;Job failed.\\n&quot;);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<h3>Configuration XML</h3>\n\n<pre class=\"prettyprint\">\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;\n&lt;Preset xmlns:xsi=&quot;<a href=\"https://www.w3.org/2001/XMLSchema-instance\">https://www.w3.org/2001/XMLSchema-instance</a>&quot; xmlns:xsd=&quot;<a href=\"https://www.w3.org/2001/XMLSchema\">https://www.w3.org/2001/XMLSchema</a>&quot; Version=&quot;1.0&quot; xmlns=&quot;<a href=\"https://www.windowsazure.com/media/encoding/Preset/2014/03\" title=\"https://www.windowsazure.com/media/encoding/Preset/2014/03&#10;Ctrl+Click or tap to follow the link\">https://www.windowsazure.com/media/encoding/Preset/2014/03</a>&quot;&gt;\n&nbsp; &lt;Sources&gt;\n&nbsp;&nbsp;&nbsp; &lt;Source StartFrame=&quot;0&quot; NumFrames=&quot;10000&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;InputFiles /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/Source&gt;\n&nbsp; &lt;/Sources&gt;\n&nbsp; &lt;Options&gt;\n&nbsp;&nbsp;&nbsp; &lt;Speed&gt;8&lt;/Speed&gt;\n&nbsp; &lt;/Options&gt;\n&lt;/Preset&gt;</pre>\n\n<p>&nbsp;</p>\n"
}