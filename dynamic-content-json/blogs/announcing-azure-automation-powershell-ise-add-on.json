{
    "Slug": "announcing-azure-automation-powershell-ise-add-on",
    "Title": "Announcing the Azure Automation PowerShell ISE add-on",
    "Summary": "We've developed a new, open-source tool for runbook authoring â€“ the (take a deep breath) Azure Automation PowerShell ISE add-on!",
    "Content": "<p>In Azure Automation, runbook authoring is typically done in the Azure portal, using our browser-based experience. However, in experimenting with ways to improve our runbook authoring process, we developed a new, open-source tool for runbook authoring &ndash; the (take a deep breath) <a href=\"https://github.com/azureautomation/azure-automation-ise-addon\">Azure Automation PowerShell ISE add-on</a>!</p>\n\n<p>This project has been in the works for a while and is already used by many of our customers. Now we think it&rsquo;s finally ready for more exposure and usage. We built this experience because we observed two things:</p>\n\n<ol>\n <li>Our customers heavily use the PowerShell ISE when writing PowerShell</li>\n <li>They even use the PowerShell ISE when writing runbooks, copy/pasting back and forth with the portal or importing/exporting with the PowerShell cmdlets</li>\n</ol>\n\n<p>So we thought, why not create an Azure Automation experience that builds on top of this powerful tool? If you&rsquo;re interested in speeding up your runbook authoring process using tools you&rsquo;re already familiar with, we hope you&rsquo;ll give the Azure Automation PowerShell ISE add-on a try!</p>\n\n<h2>Installation</h2>\n\n<p>You can install the ISE add-on module from <a href=\"https://www.powershellgallery.com/packages/AzureAutomationAuthoringToolkit/\">PowerShell Gallery</a> with:</p>\n\n<p>&gt; <em>Install-Module AzureAutomationAuthoringToolkit -Scope CurrentUser</em></p>\n\n<p>Then, if you want the PowerShell ISE to always automatically load the add-on, run:</p>\n\n<p>&gt; <em>Install-AzureAutomationIseAddOn</em></p>\n\n<p>Otherwise, whenever you want to load the add-on, just run the following in the PowerShell ISE:</p>\n\n<p>&gt; <em>Import-Module AzureAutomationAuthoringToolkit</em></p>\n\n<p>The add-on will prompt you to update if a newer version becomes available.</p>\n\n<h2>Overview</h2>\n\n<p>When you load the add-on, it will appear on the right-hand side of the PowerShell ISE.</p>\n\n<p><img alt=\"Announcing the Azure Automation PowerShell ISE Add-On\" border=\"0\" height=\"378\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/77558a67-ab45-4ec8-b22d-23f0b0915b51.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Announcing the Azure Automation PowerShell ISE Add-On\" width=\"610\"></p>\n\n<p>You can use it to view, edit and test the runbooks in your Automation Account; also to manage your Automation assets.</p>\n\n<p>The <b>Configuration </b>tab (pictured above) is where you sign in to Azure and select the Automation account to work against. Its runbooks and assets are downloaded to the workspace folder specified at the top of this tab. For security, secret asset values (like encrypted variables and credential passwords) are not downloaded, but can be manually entered and securely stored locally &ndash; more details on that later.</p>\n\n<h2>Test runbooks on your local machine</h2>\n\n<p>When you install the add-on, it also provides cmdlets that emulate the standard Automation activities like Get-AutomationVariable, Get-AutomationPSCredential, Set-AutomationVariable, etc. Because your account&rsquo;s assets get downloaded when you sign in, you can test your runbooks on your local machine before you test them in Automation!</p>\n\n<p>Once you&rsquo;ve done some local testing, you can also test your runbook in Azure Automation (or on any hybrid workers connected to your Automation Account) without leaving the ISE experience. For example:</p>\n\n<p><img alt=\"Announcing the Azure Automation PowerShell ISE Add-On\" border=\"0\" height=\"358\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4dc291d5-7ba4-4567-a22a-df7013885e00.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Announcing the Azure Automation PowerShell ISE Add-On\" width=\"610\"></p>\n\n<p>The new window shows information about a test job running in Azure Automation for this runbook. It&rsquo;s the PowerShell ISE&rsquo;s equivalent to the Test Job pane in Azure Automation.</p>\n\n<h2>Using encrypted assets</h2>\n\n<p>As mentioned above, secrets will still need to be entered manually. You can enter these values from the <b>Assets </b>tab. Assets missing values, such as an encrypted variable or a credential&rsquo;s password field, will be highlighted in orange, as shown below.</p>\n\n<p><img alt=\"Announcing the Azure Automation PowerShell ISE Add-On\" border=\"0\" height=\"355\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b6b4d4fd-2b28-436c-bcf1-21ff16eb903b.png\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto\" title=\"Announcing the Azure Automation PowerShell ISE Add-On\" width=\"610\"></p>\n\n<p>In this case, these credentials are highlighted because their password fields have not been set. Double-clicking a credential asset allows you to enter the desired value.</p>\n\n<p>Asset values are stored on disk in your workspace in two files &ndash; one for non-encrypted assets and the other for encrypted assets. Encrypted asset values use a certificate, whose thumbprint is shown on the <b>Configuration </b>tab for encryption and decryption at runtime. You can also select your own certificate to use for encryption.</p>\n\n<h2>Contribute</h2>\n\n<p>This project is open-source and we are happy to review your pull requests if you have new ideas to improve the ISE add-on (shout out to Matt McNabb for being the first external contributor!). The project is hosted on Azure Automation&rsquo;s <a href=\"https://github.com/azureautomation/azure-automation-ise-addon\">GitHub</a>.</p>\n\n<p>If you&rsquo;re interested in developing your own apps for Azure Automation, the project also serves as a great example of how to use our <a href=\"https://www.nuget.org/packages/Microsoft.Azure.Management.Automation/\">C# SDK</a>.</p>\n\n<h2>Feedback</h2>\n\n<p>Let us know what you think! If you discover any issues or have any feature requests, you can file them on <a href=\"https://github.com/azureautomation/azure-automation-ise-addon/issues\">GitHub</a>.</p>\n\n<p>You can also submit feedback using the <b>Feedback </b>tab in the ISE add-on itself.</p>\n\n<h2>Summary</h2>\n\n<p>We&rsquo;ve already heard from many users that this tool is extremely helpful to their runbook development process. We hope you&rsquo;ll try it out and let us know about your experience so we can continue to refine it.</p>\n\n<p>Happy automating!</p>\n\n<p>&nbsp;</p>\n\n<p>Just getting started with Azure Automation? Learn about the service <a href=\"https://aka.ms/Q2p1ap\">here</a> and follow Azure Automation on <a href=\"https://twitter.com/AzureAutomation\">Twitter</a> for the latest updates.</p>\n"
}