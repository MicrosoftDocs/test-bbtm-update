{
    "Slug": "announcing-azure-sdk-2-8-1-for-net",
    "Title": "Announcing the Azure SDK 2.8.1 for .NET",
    "Summary": "Today, weâ€™re excited to announce Azure SDK 2.8.1 for Visual Studio 2013 and Visual Studio 2015. This SDK update offers some great new features for Azure App Service developers to complement the new release of App Service API Apps and general availability of Mobile Apps .NET server SDK.",
    "Content": "<p>Today, we&rsquo;re excited to announce Azure SDK 2.8.1 for Visual Studio 2013 and Visual Studio 2015. This SDK update offers some great new features for <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-value-prop-what-is/\">Azure App Service</a> developers to complement the new release of App Service API Apps and general availability of Mobile Apps .NET server SDK. With these service and tooling updates fresh on heels of the recent updates to the ASP.NET 5 RC, it&rsquo;s an exciting time to be developing your Web, Mobile, and REST APIs in Azure. This post will summarize the new features being released in the Azure SDK 2.8.1.</p>\n\n<p><a href=\"https://azure.microsoft.com/en-us/downloads/\">Azure SDK 2.8.1 for .NET</a><br>\n[download for VS 2015 | VS 2013]</p>\n\n<ul>\n\t<li><b>A new modern App Service creation experience</b>: We&rsquo;ve re-imagined and re-designed the entire App Service tooling, and taken significant steps in unifying the app creation and publishing experiences for <a href=\"https://azure.microsoft.com/en-us/documentation/services/app-service/web/\">Web</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/services/app-service/mobile/\">Mobile</a>, and <a href=\"https://azure.microsoft.com/en-us/documentation/services/app-service/api/\">API</a> app developers.</li>\n\t<li><b>Project template updates for API and Mobile Apps: </b>To support developers who want to make use of the recent updates for REST API and mobile developers we&rsquo;ve updated the Visual Studio templates.</li>\n\t<li><b>Resource Manager template export:</b> The new tools provide one-click JSON file export of the resources you&rsquo;re about creating so you can re-create your topologies in other resource groups or even other Azure subscriptions.</li>\n\t<li><b>Improved REST API client generation: </b>Simplified user experience and underlying code generation improvements provided by the Azure SDK team&rsquo;s open-source Swagger-based generator known as <a href=\"https://github.com/azure/autorest\">AutoRest</a>.</li>\n</ul>\n\n<h1>Unifying the App Service developer experience in Visual Studio</h1>\n\n<p>With so many features in App Service being shared by each resource type &ndash; Mobile&rsquo;s identity features more broadly-available asset, as well as the API Definition feature becoming available everywhere, and so on &ndash; we decided that the App Service developer experience needed to model itself in the same vein. One web application may make use of numerous REST APIs housed in the same resource group, only later to be further complemented with a mobile application. Given the evidence that there will always be something new in App Service, we&rsquo;re unifying the publishing experience and providing a much simpler view of publishing your Web, Mobile, and API apps to App Service.</p>\n\n<p><img alt=\"clip_image001\" border=\"0\" height=\"285\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7aae5529-19d5-4d1d-be10-c50cfaa15c6e.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image001\" width=\"360\"></p>\n\n<h1>A redesigned, informative, and functional UI with more options</h1>\n\n<p>Along with this unification we&rsquo;ve made some amazing strides in the overall look and feel of the App Service tooling experience. We&rsquo;re excited to show off these new UI improvements, as they are the first wave of a huge re-engineering effort we&rsquo;ve made in the App Service tooling team. We concentrated this first wave of redesign on taking some new steps in the design to emulate new Visual Studio UI concepts like Connected Services and the new Office tools. Underneath the new UI is a ton of code improvements, tweaks to make new service light-ups more efficient partner and customer-driven. You&rsquo;ll hear more about the new extensibility the Azure Tools will offer in future posts, but for now let&rsquo;s take a look at the new-and-improved design of the app selection and creation experiences.</p>\n\n<h1>Mitigating the &ldquo;Which app do I want?&rdquo; confusion</h1>\n\n<p>One consistent piece of feedback we received from customers and colleagues who publish many apps to Azure was that the list became unmanageable and that it was increasingly difficult to &ldquo;guess&rdquo; or to know which app should be the destination. We&rsquo;ve borrowed from the Cloud Explorer design concept of providing both resource group <i>and </i>resource type views, we&rsquo;ve made it easier to group your apps in the &ldquo;Select Existing&rdquo; dialog.</p>\n\n<p><img alt=\"clip_image002\" border=\"0\" height=\"362\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/44f644f2-a4e5-43e7-99dc-9db059c85ff7.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image002\" width=\"480\"></p>\n\n<p>If regrouping isn&rsquo;t enough due to the large number of potential publishing targets in your subscription, we&rsquo;ve added one great feature &ndash; <b>search</b>. Now, you can free type your search query in the dialog and we&rsquo;ll filter out the apps matching your term. The search is sticky, too, so if you search and then change your view between resource groups and types, the search will maintain and only the matches will be visible. Now it&rsquo;ll be easier to find your publishing target from your subscription&rsquo;s resource listing.</p>\n\n<p><img alt=\"clip_image003\" border=\"0\" height=\"361\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8d1cf024-d820-49bd-893e-f528d897a2fa.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image003\" width=\"480\"></p>\n\n<h1>New App Service creation updates</h1>\n\n<p>Perhaps the largest steps we&rsquo;ve taken to optimize to the App Service creation experience is in the app creation/provisioning process. The new dialog, shown below, offer numerous visual cues to the opportunities available during app creation. We&rsquo;ve kept all the important hosting features on the first tab of a 2-tab experience. If all you need is a new app in the cloud and you&rsquo;ve already got a resource group and hosting plan you&rsquo;re interested in using for your new app, the process is as simple as clicking <b>Create</b> in the dialog new App Service creation dialog.</p>\n\n<p><img alt=\"clip_image004\" border=\"0\" height=\"360\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1294ac30-1d1a-45de-a679-829088adc7b3.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image004\" width=\"480\"></p>\n\n<p>If you&rsquo;re in need of a new App Service Plan, the creation of a new one is one click of the <b>New</b> button away. Once on the App Service Plan screen you&rsquo;ll have the opportunity to create a plan from any of the possible sizes available in the portal.</p>\n\n<p><img alt=\"clip_image005\" border=\"0\" height=\"360\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ec253eb3-2d67-4edb-b4d4-64cae8b08f27.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image005\" width=\"320\"></p>\n\n<p>If you want to create a new Resource Group into which your app will be published, simply type it into the Resource Groups combo box. When you do, the dialog will provide you with numerous visual cues to let you know you&rsquo;ll be creating a new Resource Group (the blue icon indicator on the <b>Hosting</b> tab reflects the same message).</p>\n\n<p><img alt=\"clip_image006\" border=\"0\" height=\"360\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/36b5ecf6-a66e-4a81-92e5-2c8e9757895c.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image006\" width=\"480\"></p>\n\n<h1>Creating additional services your app might need</h1>\n\n<p>The second tab of the new App Service creation screen provides you the opportunity to select any additional services your app might need. In this release, we&rsquo;re maintaining our support for SQL Servers and databases in the App Service creation process. Now, however, you&rsquo;re not limited to a single database. You can create as many SQL servers or databases as you need, directly within the dialog.</p>\n\n<p><img alt=\"clip_image007\" border=\"0\" height=\"362\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/772af24d-2df6-41b9-bc90-d9672bacec1e.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image007\" width=\"480\"></p>\n\n<p>Though SQL is the only provider being released during the 2.8.1 SDK time frame, we&rsquo;ve done some major engineering work to enable this dialog, part of which was to create an extensible model in which partner teams could work to extend their service light-ups. We&rsquo;ve prototyped an experience of lighting up Redis provisioning in this same dialog, as well as some discussions with the Azure Key Vault and Document DB teams. In the not-so-distant future, you&rsquo;ll be able to install extensions to this experience (and get the benefit of frequent or opt-in updates from the Visual Studio Extension Gallery integration in Visual Studio).</p>\n\n<h1>Export your Azure topology so it can be used to create mirror environments</h1>\n\n<p>As you move through the App Service creation dialog, configuring and adding services, each resource you add is shown in the initial Hosting tab&rsquo;s review area. This &ldquo;resource cart&rdquo; provides a snapshot of all the resources you&rsquo;re about to create in your subscription.</p>\n\n<p><img alt=\"clip_image008\" border=\"0\" height=\"373\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7488a742-bb5b-455f-9567-d298e5bf3212.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image008\" width=\"480\"></p>\n\n<p>As you grow the number of resources you&rsquo;ve added to your cart, the Azure Resource Manager JSON template is dynamically created an appended in memory. Once you&rsquo;re sure you&rsquo;ve added all the resources your app needs to function to your cart, a simple click of the Export button will prompt you for the location where you&rsquo;d like to save the JSON template representing everything in your cart. Then you can either use the Azure PowerShell modules to execute your template into another resource group, or even into another Azure subscription. This feature enables customers with reproducible templates representing their application topologies, without the need to manually edit and configure the templates by hand. In the case that you need to customize the topology further, the built-in resource manager template editor features previously released integrate nicely, since the template-editing features recognize the JSON schema in the exported JSON file.</p>\n\n<p><img alt=\"clip_image009\" border=\"0\" height=\"335\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ee6559f0-9d95-4eff-ad19-e2cfa5098b65.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image009\" width=\"610\"></p>\n\n<h1>App Service project template updates</h1>\n\n<p>To accommodate new changes in the Mobile and API resources we&rsquo;ve updated the Visual Studio templates to take advantage of new enhancements in the feature areas.</p>\n\n<h1>Mobile App template improvements</h1>\n\n<p>App Service Mobile makes it easy to build mobile applications which work with data offline, authenticate users, and send push notifications. We just announced <a href=\"https://azure.microsoft.com/blog/\">general availability support</a> for the Mobile Apps .NET server SDK, which allows you to build an application in App Service that serves these features, as well as custom logic, to your mobile clients. In conjunction with this release, we are today updating support for creating and managing a mobile app project in Visual Studio. To get started, open the New Project dialog from File &gt; New &gt; Project&hellip; Then expand Templates &gt; Visual C#, and select &quot;Web&quot;. Choose &quot;ASP.NET Web Application,&quot; fill in the project name, and click OK. Under &quot;ASP.NET 4.5.2 Templates,&quot; select &quot;Azure Mobile App.&quot;</p>\n\n<p><img alt=\"clip_image010\" border=\"0\" height=\"476\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2d8b8f73-0281-4208-896c-e1306b93d8d4.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image010\" width=\"610\"></p>\n\n<p>Click OK. Your application will be created and appear in the Solution Explorer. The template should feel familiar to customers using Mobile Apps or Mobile Services. The main difference that you may notice is in the configuration. The template now configures everything in OWIN Startup and gives you more granular control over what components are and aren&rsquo;t added.</p>\n\n<p><img alt=\"clip_image011\" border=\"0\" height=\"360\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fac0bda4-5bc2-42a5-9964-5c37c1820684.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image011\" width=\"257\"></p>\n\n<p>The project represents a simple to-do list application. Mobile clients can consume data stored in SQL through the <b>TodoItemController</b>, which derives from <b>TableController</b>. TableController translates mobile-friendly APIs into CRUD operations which can be understood by the data backend of your choice (in this case, SQL). It also adheres to the offline contract, so you can instantly start leveraging the Mobile Apps offline sync capabilities. You can add more table controllers or mobile-friendly API controllers by right-clicking on the &quot;Controllers&quot; folder and selecting Add &gt; Controller. Then pick <b>Azure Mobile Apps Table Controller</b> or <b>Azure Mobile Apps Custom Controller</b> and follow the wizard to create your endpoint.</p>\n\n<p><img alt=\"clip_image012\" border=\"0\" height=\"336\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d5309bf6-e1c0-4d81-8fd4-8eebdf090bd0.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image012\" width=\"610\"></p>\n\n<p>When you have your project ready, you can publish it to App Service using the new Publish dialog as described earlier in the article. Mobile Apps are now supported as a top-level publish target in the menu of options in the App Service creation dialog.</p>\n\n<p><img alt=\"clip_image013\" border=\"0\" height=\"84\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/622daa55-a00f-4b61-b723-94a5e6275669.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image013\" width=\"360\"></p>\n\n<h1>API App template improvements</h1>\n\n<p>The API App model evolved since its early preview. Since then, we&rsquo;ve heard from customers that local debugging was important, so it is now enabled in the new API Apps template. This template results in a simpler overall structure, with fewer dependencies on resource management templates or API App Gateway-specific files. At its heart, the API Apps template is basically a Web API template, with the addition of the open-source Swagger-enabling NuGet package known as <a href=\"https://www.nuget.org/packages/swashbuckle\">Swashbuckle</a>. We&rsquo;ve also included the previous <b>SwaggerConfig.cs</b> file changes we made so that the Swagger UI is disabled by default and included the operation filter that improved our approach to Swagger operation ID generation (<a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-api-dotnet-swashbuckle-customize/\">read more about the Swashbuckle customizations on Azure.com</a>).</p>\n\n<p><img alt=\"clip_image014\" border=\"0\" height=\"360\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c4e2aa25-0758-4ca2-8724-c24c3d00e388.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image014\" width=\"260\"></p>\n\n<h1>REST API generation improvements</h1>\n\n<p>Mirroring the investment taken by App Service teams like API Apps and API Management with their use of Swagger, we&rsquo;re continuing our investment with code-generation based on Swagger metadata exposed by API Apps. By clicking most C# projects in Visual Studio and selecting the <b>Add &gt; REST API Client</b> gesture, the simplified REST API Client generator dialog will appear. Clicking the <b>Browse</b> button will take you to the &ldquo;Select App Service&rdquo; dialog, where you can select any App Service that has an API Definition endpoint set.</p>\n\n<p><img alt=\"clip_image015\" border=\"0\" height=\"596\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/236c97f9-7050-442d-9ffc-2a3cc4703409.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px\" title=\"clip_image015\" width=\"610\"></p>\n\n<h1>Summary</h1>\n\n<p>If you don&rsquo;t already have an Azure account, you can sign-up for a <a href=\"https://azure.microsoft.com/en-us/pricing/free-trial/\">free trial</a> and start using all of the above features today. Then visit the <a href=\"https://azure.microsoft.com/en-us/get-started/\">Azure Developer Center</a> to learn more about how to build apps with it. Please submit bugs through Connect, suggestions through UserVoice, and quick thoughts or ideas through <a href=\"https://go.microsoft.com/fwlink/?linkid=517102&amp;clcid=0x409\">Send-a-smile</a> in the Visual Studio IDE. This release is an early step in a new direction for App Service tools, so we&rsquo;re eager to hear your feedback, learn which services you&rsquo;d like to see light up in the resource cart, and help us provide a more streamlined app development by continuing to give your input. Check the <a href=\"https://azure.microsoft.com/en-us/documentation/articles/azure-sdk-dotnet-release-notes-2_8/\">Azure SDK 2.8 and 2.8.1 release notes page</a> for details or known issues related to this SDK release.&nbsp;</p>\n\n<h3>Credits</h3>\n\n<p>This blog post is a collaboration of multiple people. Big thanks to <a href=\"https://twitter.com/mattchenderson\">Matthew Henderson</a> and all the teammates who worked hard on this release.</p>\n"
}