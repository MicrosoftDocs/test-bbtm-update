{
    "Slug": "announcing-node-for-azure-mobile-apps",
    "Title": "Announcing Node.js support for Azure Mobile Apps",
    "Summary": "Announcing the release of a Node SDK for Azure Mobile Apps which will enable you to build and run mobile backends using Node.js on App Service, as well as add push notifications, mobile auth, offline sync and other mobile features and backend APIs to any Node.js app running on App Service.",
    "Content": "<p>Last month, we <a href=\"https://azure.microsoft.com/en-us/blog/azure-mobile-apps-august-2015-update/\">announced</a> significant update to the Mobile Apps feature of Azure App Service, which enabled developers to quickly build mobile backend APIs in .NET, add mobile features to their existing ASP.NET web apps, as well as add web pages to their .NET mobile backends.</p>\n\n<p>Today we are releasing a Node SDK for Azure Mobile Apps, extending similar experience to Node.js apps. This enables you to build and run mobile backends using Node.js on App Service, as well as add push notifications, mobile auth, offline sync and other mobile features and backend APIs to any Node.js app running on App Service.</p>\n\n<p>This SDK is released as Open Source under the MIT license and we welcome <a href=\"https://github.com/Azure/azure-mobile-apps-node/blob/master/contributor.md\">contributions from our community</a>.</p>\n\n<h1 id=\"getting-started-with-node-and-azure-mobile-apps\">Getting started with node and Azure Mobile Apps</h1>\n\n<p>To get going, follow the short and easy <a href=\"https://github.com/Azure/azure-mobile-apps-node#quickstart\">quickstart</a> steps included in readme.</p>\n\n<ol>\n <li>\n <p>Create an Azure Mobile App using&nbsp;the instructions found <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-dotnet-backend-ios-get-started-preview/#create-a-new-azure-mobile-app-backend\">here</a>. You can also use a Web or API App, as the Mobile App experience is available in API, Mobile and Web Apps.</p>\n </li>\n <li>\n <p>Create a new directory, initialize git, and initialize npm.</p>\n\n <pre class=\"prettyprint\">\n<code>mkdir quickstart\ngit init\nnpm init\n</code></pre>\n </li>\n <li>\n <p>Install (with npm) the azure-mobile-apps and express packages.</p>\n\n <pre class=\"prettyprint\">\n<code>npm install express azure/azure-mobile-apps-node --save\n</code></pre>\n </li>\n <li>\n <p>Create a server.js file and add the following code to the file:</p>\n\n <pre class=\"prettyprint\">\n<code>var app = require(&#39;express&#39;)(); // Create an instance of an Express app\nvar mobileApp = require(&#39;azure-mobile-apps&#39;)(); // Create an instance of a Mobile App with default settings\n\nmobileApp.tables.add(&#39;TodoItem&#39;); // Create a Table for &#39;TodoItem&#39; with default settings\n\nmobileApp.attach(app); // Attach the mobileApp to express\napp.listen(process.env.PORT || 3000);\n</code></pre>\n </li>\n <li>\n <p>Run your project locally by executing <code>node server.js.</code></p>\n </li>\n <li>\n <p>Publish your project to the existing Azure Mobile App by adding it as a remote and pushing your changes.</p>\n\n <pre class=\"prettyprint\">\n<code>git remote add azure https://{user}@{sitename}.scm.azurewebsites.net:443/{sitename}.git\n\ngit add package.json server.js\n\ngit commit -m &#39;Quickstart created&#39;\n\ngit push azure master\n</code></pre>\n </li>\n</ol>\n\n<p>For steps 4-5, you can use any of the clients found in the <a href=\"https://github.com/Azure/azure-mobile-services-quickstarts\">Client &amp; Server Quickstarts</a> to test. To test locally, set the client to point to <code>https://localhost:3000</code>.</p>\n\n<p>Did you notice we&#39;re just using <a href=\"https://expressjs.com/\">express</a> to run the site? This is&nbsp;one example of the benefits of Web and Mobile Apps being one cohesive experience. This means it <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/\">deploys like a Web App</a> and can use features like <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-staged-publishing/\">deployment slots</a> and <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">WebJobs</a>.</p>\n\n<h2 id=\"using-mobile-apps-tables\">Using Azure Mobile Apps Tables</h2>\n\n<p>Mobile App Tables is a layer on top of your data store that allows the Azure Mobile Apps clients to access your application&#39;s data. Today we support Azure SQL DB and SQL Server for production applications. We&#39;ve also included an in-memory store which shouldn&#39;t be used for production purposes, but can be convenient for demos and development purposes. When you add a table to your Mobile App on the first request, the SDK will create, in the case of SQL Server, a table. The table will have some important columns for the SDK like the id and a timestamp. It will also have any columns specified in the table definition, and if you have Dynamic Schema enabled, it will also add any columns included in the body, but not in the table already.</p>\n\n<p>While being able to add a table with a single line of code is pretty cool, what if we want to customize the CRUD operations? There is a handy table configuration object to make that easy. Best practice is to define this in a separate file in a <code>./tables</code> directory, so we&#39;ll create a TodoItem.js file.</p>\n\n<pre class=\"prettyprint\">\n<code>// TodoItem.js\nvar todoTable = require(&#39;azure-mobile-apps&#39;).table(&#39;TodoItem&#39;);\n// Export our table\nmodule.exports = todoTable;\n//todoTable.columns = {&quot;text&quot;:&quot;string&quot;, &quot;complete&quot;:&quot;boolean&quot;} //Dynamic schema will create these for us. It&#39;s on by default.\ntodoTable.dynamicSchema = true; // this is the default setting\n\ntodoTable.read(function(context){\n  return context.execute();\n});\n</code></pre>\n\n<p>There is support for the&nbsp;four classic CRUD operations with corresponding methods named insert, read, update, delete. Read more about the table operations in our API Documentation.</p>\n\n<p>The context object exposes different properties depending on the operation; read expose a query object and insert and update expose an item object. These allow you to modify the behavior of the CRUD operation from the default.</p>\n\n<pre class=\"prettyprint\">\n<code>// TodoItem.js continued\n// Attach a user id to the item that was inserted\ntable.insert(function (context) {\n  context.item.user = context.user.id;\n  return context.execute();\n});\n\n// Only return items where the user id matches the current user\ntable.read(function (context) {\n  context.query.where({\n    user: context.user.id\n  });\n  return context.execute();\n});\n</code></pre>\n\n<p>To include our <code>TodoItem</code> table (and any other table in the <code>./tables</code> directory), just add the import line in our server.js file.</p>\n\n<pre class=\"prettyprint\">\n<code>// server.js\nvar app = require(&#39;express&#39;)(); // Create an instance of an Express app\nvar mobileApp = require(&#39;azure-mobile-apps&#39;)(); // Create an instance of a Mobile App with default settings\n\nmobileApp.tables.import(&#39;./tables&#39;); // Import tables from &#39;./tables&#39;\n\nmobileApp.attach(app); // Attach the mobileApp to express\napp.listen(process.env.PORT || 3000);\n</code></pre>\n\n<p>If you haven&#39;t specified a database in your app settings (which the portal will help you do), it will use an in-memory store which should not be used for production purposes. Currently, the SDK only supports SQL Server, but we&#39;re investigating other options and we&#39;re open to contributions in this area. Visit our GitHub page to <a href=\"https://github.com/Azure/azure-mobile-apps-node\">learn about setting up local environment variables</a> to enable SQL locally.</p>\n\n<h2 id=\"using-auth-with-mobile-apps-node\">Using auth with Azure Mobile Apps&nbsp;and node</h2>\n\n<p>Your next question is probably related to that <code>context.user</code> object. How does it get there? It&#39;s part of Azure Mobile Apps integrated authentication features. To learn more about how to set up auth, you can follow our <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-dotnet-backend-ios-get-started-users-preview/\">Getting Started with Auth</a> tutorial. Once you&#39;ve done that, you can require authentication for a given table action with the following code.</p>\n\n<pre class=\"prettyprint\">\n<code>table.insert.authorise = true;\n</code></pre>\n\n<p>If you want the whole table secured, use:</p>\n\n<pre class=\"prettyprint\">\n<code>table.authorise = true;\n</code></pre>\n\n<p>Setting up auth to work locally requires a few extra steps we&#39;ll cover later on.</p>\n\n<h1 id=\"feedback-and-thanks\">Feedback and thanks</h1>\n\n<p>A special thanks goes out to all the community members&nbsp;who have helped us with early feedback prior to this release. We&#39;d like to encourage all of&nbsp;our users to provide any feedback you have on the product or experience of using it. Feel free to <a href=\"https://github.com/Azure/azure-mobile-apps-node/blob/master/contributor.md#submitting-an-issue\">leave an issue</a> on our GitHub for any bugs or new features.</p>\n\n<p>Push will be coming soon and we&#39;ll have more blogs and documentation coming too as we keep fleshing out the SDK prior to release. So keep an eye out and start building some apps!</p>\n\n<p>For more news and information:</p>\n\n<ul>\n <li><a href=\"https://twitter.com/azuremobile\">Follow us @AzureMobile</a></li>\n <li>Ask us questions on StackOverflow</li>\n</ul>\n"
}