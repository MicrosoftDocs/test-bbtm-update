{
    "Slug": "announcing-preview-of-java-message-service-2-over-amqp-on-azure-service-bus",
    "Title": "Announcing preview of Java Message Service 2.0 over AMQP on Azure Service Bus",
    "Summary": "Azure Service Bus simplifies enterprise messaging scenarios by leveraging familiar queue and topic subscription semantics over the industry driven AMQP protocol.",
    "Content": "<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p itemprop=\"name\"><strong>Updated on February 22, 2021</strong>: Java Message Service (JMS) 2.0 API on Azure Service Bus Premium is now generally available. For more information, see the blog post&nbsp;<a href=\"https://techcommunity.microsoft.com/t5/messaging-on-azure/announcing-general-availability-for-java-message-service-jms-2-0/ba-p/2073151\" target=\"_blank\">Announcing general availability for Java Message Service (JMS) 2.0 API on Azure Service Bus Premium</a>.&nbsp;</p>\n</div>\n\n<p><a href=\"https://azure.microsoft.com/en-us/services/service-bus/\" target=\"_blank\">Azure Service Bus</a> simplifies enterprise messaging scenarios by leveraging familiar queue and topic subscription semantics over the industry-driven&nbsp;Advanced Message Queuing Protocol&nbsp;(AMQP). It offers customers a fully managed platform as a service (PaaS) offering with deep integrations with Azure services to provide a messaging broker with high throughput, reliable latency while ensuring high availability, secure design, and scalability as a first-class experience. We aim to offer Azure Service Bus for customer workloads on most application stacks and ecosystems.</p>\n\n<p>In keeping with that vision, we&rsquo;re excited to announce preview support for <strong>Java Message Service (JMS) 2.0 over AMQP in Azure Service Bus premium tier</strong>. With this, we empower customers to seamlessly lift and shift their Java and Spring workloads to Azure while also helping them modernize their application stack with best in class enterprise messaging in the cloud.</p>\n\n<p>As enterprise customers look to lift and shift their workloads to Azure, they may take the opportunity to modernize their application stack by leveraging cloud-native Azure offerings. This is more appropriate for components on the data plane, storing or moving data, which benefit from moving away from an infrastructure as a service (IaaS) hosted setup to a more cloud-native PaaS setup.</p>\n\n<p>With databases and data stores, the establishment of standardized APIs and protocols has paved the way for seamless migration, wherein the application is agnostic of the actual provider or implementation of this standardized API and with negligible or configuration only code changes, the applications can move from their current on-premises provider to Azure&rsquo;s fully managed PaaS offering with expected behavior.</p>\n\n<p>The enterprise messaging ecosystem has been largely fragmented compared to the data ecosystem until the recent <strong>AMQP 1.0 protocol</strong> standardization in 2011 that drove consistent behavior across all enterprise message brokers guaranteed by the protocol implementation. However, this still did not lead to a standardized API contract, perpetuating the fragmentation in the enterprise messaging space.</p>\n\n<p>The <strong>Java </strong>Enterprise community (and by extension, <strong>Spring</strong>) has made some forward strides with the <strong>Java Message Service (JMS 1.1 and 2.0) specification</strong> to standardize the API utilized by producer and consumer applications when interacting with an enterprise messaging broker. The <strong>Apache QPID</strong> community furthered this by its implementation of the JMS API specification over AMQP. QPID-JMS, whether standalone or as part of the Spring JMS package, is the de-facto JMS implementation for most enterprise customers working with a variety of message brokers.</p>\n\n<h2>Connect existing applications with Azure Service Bus over AMQP</h2>\n\n<p>With the feature list supported with this preview (with full parity planned by general availability), Azure Service Bus supports all Java Message Service API contracts, enabling customers to bring their existing applications to Azure without rewriting the application. Here is a list of JMS features that are supported today:</p>\n\n<ul>\n\t<li>Queues.</li>\n\t<li>Topics.</li>\n\t<li>Temporary queues.</li>\n\t<li>Temporary topics.</li>\n\t<li>Subscriptions.\n\t<ul>\n\t\t<li>Shared durable subscriptions.</li>\n\t\t<li>Shared non-durable subscriptions.</li>\n\t\t<li>Unshared durable subscriptions.</li>\n\t\t<li>Unshared non-durable subscriptions.</li>\n\t</ul>\n\t</li>\n\t<li>QueueBrowser.</li>\n\t<li>TopicBrowser.</li>\n\t<li>Auto-creation of all the above entities (if they don&rsquo;t already exist).</li>\n\t<li>Message selectors.</li>\n\t<li>Sending messages with delivery delay (scheduled messages).</li>\n</ul>\n\n<h2>Seamless migration from on-premises or IaaS hosted JMS provider to Azure Service Bus</h2>\n\n<p>To connect an existing JMS based application with Azure Service Bus, simply add the Azure Service Bus JMS <a href=\"https://search.maven.org/artifact/com.microsoft.azure/azure-servicebus-jms\" target=\"_blank\">Maven package</a> or the <a href=\"https://docs.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-service-bus\" target=\"_blank\">Azure Service Bus starter for Spring boot</a> to the application&rsquo;s pom.xml and add the Azure Service Bus connection string to the configuration parameters.</p>\n\n<p>With configuration only code changes, as shown above, customers can keep their business logic agnostic of the message broker and avoid any vendor lock-in.<br>\n&nbsp;&nbsp; <a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/694d3869-01c4-4b64-bf74-46d43ba9fc12.png\"><img alt=\"migration from on-premises or IaaS hosted JMS provider to Azure Service Bus\" border=\"0\" height=\"319\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31cf3408-2abd-4fba-809d-3b58016ba46d.png\" style=\"border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none;\" title=\"\" width=\"1024\"></a></p>\n\n<h2>Simple pricing, painless deployments, and scalable resourcing</h2>\n\n<p>By leveraging Azure Service Bus JMS support, customers can now avoid the overhead of procuring licenses, managing an enterprise messaging broker on their own IaaS Compute, simplify cost management with a fixed price per messaging unit, and by leveraging automatic scale up and down provisioning to address variability in workloads.</p>\n\n<h2>Integrate with other Azure offerings to further modernize your application stack</h2>\n\n<p>You can also leverage Azure Service Bus integration with other Azure offerings to modernize and simplify the application stack. Here are some ways on how you can do that.</p>\n\n<ol>\n\t<li><strong>Azure Logic Apps</strong>: Utilize Azure Logic Apps connectors for Azure Service Bus to replace various critical business workflows with a simple low-code pay-as-you-go serverless offering.</li>\n\t<li><strong>Azure Functions</strong>: Utilize Azure Functions triggers for Azure Service Bus to replace custom applications with a simple pay-as-you-go serverless PaaS offering.</li>\n\t<li><strong>Azure Monitor and Alerts</strong>: Utilize Azure monitor and alerts to keep an eye on the Azure Service Bus Namespace, Queue, Topics, and Subscriptions level metrics.</li>\n\t<li><strong>Azure KeyVault</strong>: Utilize integration with Azure KeyVault to encrypt the data on the namespace with a customer-managed key.</li>\n\t<li><strong>Virtual Networks and Private endpoints</strong>: Secure access to Azure Service Bus using Virtual network service endpoints. Connect with a cloud-hosted service via an address hosted on your private network using Private endpoints.</li>\n</ol>\n\n<h2>Get started today</h2>\n\n<p>Get started today by <a href=\"https://aka.ms/jmsGettingStarted\" target=\"_blank\">provisioning a Service Bus namespace with JMS features</a> and <a href=\"https://aka.ms/jmsActiveMQToServiceBus\" target=\"_blank\">migrating your existing Java and Spring applications from Apache ActiveMQ to Service Bus</a>.</p>\n"
}