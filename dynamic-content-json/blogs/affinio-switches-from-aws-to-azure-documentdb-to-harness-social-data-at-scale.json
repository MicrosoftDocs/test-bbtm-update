{
    "Slug": "affinio-switches-from-aws-to-azure-documentdb-to-harness-social-data-at-scale",
    "Title": "Azure DocumentDB powers the modern marketing intelligence platform",
    "Summary": "Affinio is an advanced marketing intelligence platform that enables brands to deeply understand their users in a deeper level. Affinio’s business model centers on extracting marketing insights for its clients—from billions of points of social media data to more narrowly focused marketing efforts. In order to store and process billions of social network connections without the overhead of database management, data partitioning, and data indexing, they chose Azure DocumentDB. You can read more about Affinio’s usage of DocumentDB in this new case study.",
    "Content": "<p><a href=\"https://affinio.com/\">Affinio</a> is an advanced marketing intelligence platform that enables brands to understand their users in a deeper and richer level. Affinio&rsquo;s learning engine extracts marketing insights for its clients from mining billions of points of social media data. In order to store and process billions of social network connections without the overhead of database management, partitioning, and indexing, the Affinio engineering team chose Azure DocumentDB.</p>\n\n<p>You can learn more about Affinio&rsquo;s journey in this <a href=\"https://customers.microsoft.com/Pages/CustomerStory.aspx?recid=29764\">newly published case study</a>.&nbsp; In this blog post, we provide an excerpt of the case study and discuss some effective patterns for storing and processing social network data.</p>\n\n<p>&nbsp;</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/42321ba4-42ef-4bc5-bf8d-224bce3af16a.png\"><img alt=\"image\" border=\"0\" height=\"311\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a715a1af-51ae-48e8-8e56-c480dba7edaa.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" title=\"image\" width=\"793\"></a></p>\n\n<h2><strong>Why are NoSQL databases a good fit for social data?</strong></h2>\n\n<p>Affinio&rsquo;s marketing platform extracts data from social network platforms like Twitter and other large social networks&nbsp;in order to feed into its learning engine and learn insights about users and their interests.&nbsp;The biggest&nbsp;dataset&nbsp;consisted&nbsp;of&nbsp;approximately&nbsp;one billion social media profiles, growing at 10 million per month.&nbsp;Affinio also needs to store and process a number of other feeds&nbsp;including Twitter tweets (status messages), <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-geospatial/\">geo-location data</a>, and machine learning results of which topics are likely to interest which users.</p>\n\n<p>A NoSQL database&nbsp;is a <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-nosql-vs-sql/\">natural choice for these data feeds</a>&nbsp;for a number of reasons:</p>\n\n<ul>\n <li>The APIs from popular social networks&nbsp;produced data&nbsp;in JSON format.</li>\n <li>The data&nbsp;volume&nbsp;is in the TBs,&nbsp;and needs to be refreshed frequently (with both the volume and frequency&nbsp;expected to&nbsp;increase rapidly over time).</li>\n <li>Data from multiple social media producers is processed downstream, and each social media channel has its own schema that evolves independently.</li>\n <li>And crucially, a small development team needs to be able to iterate rapidly on new features, which means that the database must be easy to setup, manage, and scale.</li>\n</ul>\n\n<h2><strong>Why does Affinio&nbsp;use DocumentDB over AWS DynamoDB and Elasticsearch</strong></h2>\n\n<p style=\"text-align:justify\">The Affinio engineering team initially built their storage solution on top of Elasticsearch on AWS EC2 virtual machines. While Elasticsearch addressed their need for scalable JSON storage, they realized that setting up and managing their own Elasticsearch servers took away precious time from their development team. They then evaluated Amazon&rsquo;s DynamoDB service which was fully-managed, but it did not have the query capabilities that Affinio needed.</p>\n\n<p style=\"text-align:justify\">Affinio then tried Microsoft Azure DocumentDB, Microsoft&rsquo;s planet-scale NoSQL database service. DocumentDB&nbsp;is a fully-managed NoSQL database with <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-indexing\">automatic indexing of JSON documents</a>, elastic scaling of throughput and storage, and <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-sql-query/\">rich query capabilities</a> which meets all their requirements for functionality and performance. As a result, Affinio decided to migrate its entire stack off AWS and onto Microsoft Azure.</p>\n\n<p><em>&ldquo;Before moving to DocumentDB, my developers would need to come to me to confirm that our Elasticsearch deployment would support their data or if I would need to scale things to handle it. DocumentDB removed me as a bottleneck, which has been great for me and them.&rdquo; </em></p>\n\n<p><em>-Stephen Hankinson, CTO, Affinio</em></p>\n\n<h2><strong>Modeling Twitter Data in DocumentDB &ndash; An Example</strong></h2>\n\n<p>As an example, we take a look at how Affinio stored data from Twitter status messages in DocumentDB. For example, here&rsquo;s a sample JSON status message (truncated for visibility).&nbsp;</p>\n\n<pre class=\"prettyprint\">\n{  \n   &quot;created_at&quot;:&quot;Fri Sep 02 06:43:15 +0000 2016&quot;,\n   &quot;id&quot;:771599352141721600,\n   &quot;id_str&quot;:&quot;771599352141721600&quot;,\n   &quot;text&quot;:&quot;RT @DocumentDB: Fresh SDK! #DocumentDB #dotnet SDK v1.9.4 just released!&quot;,\n   &quot;user&quot;:{  \n      &quot;id&quot;:2557284469,\n      &quot;id_str&quot;:&quot;2557284469&quot;,\n      &quot;name&quot;:&quot;Azure DocumentDB&quot;,\n      &quot;screen_name&quot;:&quot;DocumentDB&quot;,\n      &quot;location&quot;:&quot;&quot;,\n      &quot;description&quot;:&quot;A blazing fast, planet scale NoSQL service delivered by Microsoft.&quot;,\n      &quot;url&quot;:&quot;https://t.co/30Tvk3gdN0&quot;\n   }\n}</pre>\n\n<p>Storing this data in DocumentDB is straightforward. As a schema-less NoSQL database, DocumentDB consumes JSON data directly from <a href=\"https://dev.twitter.com/rest/public\">Twitter APIs</a> without requiring schema or index definitions. As a developer, the primary considerations for storing this data in DocumentDB are the choice of partition key, and addressing any unique query patterns (in this case, searching with text messages). We&#39;ll look at how Affinio addresses these two.</p>\n\n<p><strong>Picking a good partition key:</strong>&nbsp; DocumentDB partitioned collections require that you specify a property within your JSON documents as the partition key. Using this partition key value, DocumentDB automatically distributes data and requests across multiple physical servers. A good partition key has a number of distinct values and allows DocumentDB to distribute data and requests across a number of partitions. Let&rsquo;s take a look at a few candidates for a good partition key for social data like Twitter status messages.</p>\n\n<ul>\n <li>&quot;created_at&quot; &ndash; has a number of distinct values and is useful for accessing data for a certain time range. However, since new status messages are inserted based on the created time, this could potentially result in hot spots for certain time value like the current time</li>\n <li>&quot;id&quot; &ndash; this property corresponds to the ID for a Twitter status message. It is a good candidate for a partition key, because there are a large number of unique users, and they can be distributed somewhat evenly across any number of partitions/servers</li>\n <li>&quot;user.id&quot; &ndash; this property corresponds the ID for a Twitter user. This was ultimately the best choice for a partition key because not only does it allow writes to be distributed, it also allows reads for a certain user&rsquo;s status messages to be efficiently served via queries from a single partition</li>\n</ul>\n\n<p>With &quot;user.id&quot; as the partition key, Affinio created a single <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-partition-data\">DocumentDB partitioned collection</a> provisioned with 200,000 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-request-units/\">request units per second</a> of throughput (both for ingestion and for querying via their learning engine).</p>\n\n<p><strong>Searching within the text message: </strong>Affinio needs to be able to search for words within status messages, and didn&rsquo;t need to perform advanced text analysis like ranking. Affinio runs a Lucene tokenizer on the relevant fields when it needs to search for terms, and it stores the terms as an array inside a JSON document in DocumentDB. For example, &quot;text&quot; can be tokenized as a &quot;text_terms&quot; array containing the tokens/words in the status message. Here&rsquo;s an example of what this would look like:</p>\n\n<pre class=\"prettyprint\">\n{  \n   &quot;text&quot;:&quot;RT @DocumentDB: Fresh SDK! #DocumentDB #dotnet SDK v1.9.4 just released!&quot;,\n   &quot;text_terms&quot;:[  \n      &quot;rt&quot;,\n      &quot;documentdb&quot;,\n      &quot;dotnet&quot;,\n      &quot;sdk&quot;,\n      &quot;v1.9.4&quot;,\n      &quot;just&quot;,\n      &quot;released&quot;\n   ]\n}</pre>\n\n<p>Since DocumentDB <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-indexing/\">automatically indexes all paths within JSON</a> including arrays and nested properties, it is now possible to query for status messages with certain words in them like &ldquo;documentdb&rdquo; or &ldquo;dotnet&rdquo; and have these served from the index. For example, this is <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-sql-query/#built-in-functions\">expressed in SQL</a> as:</p>\n\n<pre class=\"prettyprint\">\nSELECT * FROM status_messages s WHERE ARRAY_CONTAINS(s.text_terms, &quot;documentdb&quot;)\n</pre>\n\n<h2><strong>Next Steps </strong></h2>\n\n<p>In this blog post, we looked at why Affinio chose Azure DocumentDB for their market intelligence platform, and some effective patterns for storing large volumes of social data in DocumentDB.</p>\n\n<ul>\n <li>Read the <a href=\"https://customers.microsoft.com/Pages/CustomerStory.aspx?recid=29764\">Affinio case study</a> to learn more about how Affinio harnesses DocumentDB to process terabytes of social network data, and why they chose DocumentDB over Amazon DynamoDB and Elasticsearch.</li>\n <li>Learn more about Affinio from their <a href=\"https://www.affinio.com/\">website</a>.</li>\n <li>If you&rsquo;re looking for a NoSQL database to handle the demands of modern marketing, ad-technology and real-time analytics applications, try out <a href=\"https://azure.microsoft.com/pricing/free-trial/\" ms.cmpgrp=\"body\" ms.cmpnm=\"DocumentDB using your free trial\" ms.cmptyp=\"link\" ms.interactiontype=\"1\" ms.pgarea=\"content\" ms.title=\"\" target=\"_blank\"><u>DocumentDB using your free trial</u></a>, or schedule a <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-community/#contact-the-team\" ms.cmpgrp=\"body\" ms.cmpnm=\"1:1 chat with the DocumentDB engineering team\" ms.cmptyp=\"link\" ms.interactiontype=\"1\" ms.pgarea=\"content\" ms.title=\"\" target=\"_blank\"><u>1:1 chat with the DocumentDB engineering team</u></a>.&nbsp;&nbsp;</li>\n <li>Stay up-to-date on the latest DocumentDB news and features by following us on Twitter <a href=\"https://twitter.com/DocumentDB\"><u>@DocumentDB</u></a>.</li>\n</ul>\n"
}