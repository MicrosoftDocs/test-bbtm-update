{
    "Slug": "announcing-general-availability-of-ios-offline-sync-sdk",
    "Title": "Announcing General Availability of iOS Offline Sync SDK",
    "Summary": "Most mobile apps don't work without a network connection. Learn how to use Mobile Services offline sync on iOS, and create responsive and robust apps that work, even when your network doesn't.",
    "Content": "Don’t you hate it when your mobile app suddenly stops working, just because you’ve stepped on an elevator?  Or, maybe you’re a traveling sales rep who needs quick access to customer data, even when you’re in a dead zone. End users want apps that work, even when their network doesn’t. Unfortunately, many apps have limited or no functionality when a device is offline, mainly because it’s quite challenging to correctly implement sync behavior. What should be cached on the device?  How will the app know it should fetch new data?  What happens if data is modified while the user is offline, but they have already made local edits?\n\nMobile Services offline sync is designed to solve these problems, with cross-platform client SDKs that handle all of these complexities for you. Using Mobile Services, developers can easily provide a native sync experience across <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/\" target=\"_blank\">iOS</a>, <a href=\"https://azure.microsoft.com/blog/2014/08/07/offline-support-in-azure-mobile-services-android-sdk/\" target=\"_blank\">Android</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-xamarin-ios-get-started-offline-data\" target=\"_blank\">Xamarin</a>, and <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data\" target=\"_blank\">Windows</a> apps.\n\nWe are excited to announce the general availability of the <a href=\"https://go.microsoft.com/fwLink/p/?LinkID=266533\" target=\"_blank\">Mobile Services iOS 2.0 SDK</a>, which adds these new sync features for native iOS. Offline sync is already available in the managed client SDK for Windows, Xamarin iOS, and Xamarin Android, and in the preview Android SDK. We’ve updated the quickstarts in the Azure portal to make it even easier to use the feature. The Objective-C iOS quickstart is now offline-enabled, along with those for Windows, Xamarin iOS, and Xamarin Android.\n\nOffline sync offers many benefits:\n<ul>\n\t<li>Improve app responsiveness by caching server data locally on the device</li>\n\t<li>Create robust apps that can handle transient network issues</li>\n\t<li>Sync data across multiple devices and detect conflicts when the same record is modified by two devices</li>\n\t<li>Reduce data use, particularly for metered connections</li>\n</ul>\nWhen your app is in offline mode, users can still create and modify data, which will be saved to a local store. When the app is back online, it can synchronize local changes with the Mobile Services backend. The feature also includes support for detecting conflicts when the same record is changed on both the client and the backend. Conflicts can then be handled either on the server or the client. Offline sync is very lightweight; for example, it <em>doesn't</em> require storing the sync state of all mobile clients in the backend database. If you’re already using Azure Mobile Services, you can make your app offline-enabled by following these tutorials:\n<ul>\n\t<li><a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data\">Get started with offline data sync in Mobile Services</a></li>\n\t<li><a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-handling-conflicts-offline-data/\">Handle conflicts with offline data sync</a></li>\n</ul>\nYour app should enable Core Data and define a model for both your app data objects and the <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data/#review-core-data\">system tables required by the SDK</a>. In your app’s initialization logic (such as <strong>QSTodoService.init</strong> in the iOS quickstart), you will create a mobile services local store and associate it with the sync context:\n<pre class=\"prettyprint\">// create a Mobile Services local store based on the app's Core Data model\nMSCoreDataStore *store = [[MSCoreDataStore alloc] initWithManagedObjectContext:context]; \n\n// associate store with sync context \nself.client.syncContext = \n    [[MSSyncContext alloc] initWithDelegate:nil\n                                 dataSource:store \n                                   callback:nil]; \n        \n// Create an MSSyncTable instance to allow us to work with the TodoItem table\nself.syncTable = [_client syncTableWithName:@\"TodoItem\"];</pre>\nThe app should now use this <strong>MSSyncTable</strong> instance (rather than <strong>MSTable</strong>) for all CRUD operations. Reads will fetch from local storage, and all Create, Update and Delete operations will be queued to be sent to the server. To send these queued changes, use the <strong>pushWithCompletion</strong> method. This is a method on the sync context and will replay all modifications in order:\n<pre class=\"prettyprint\">[self.client.syncContext pushWithCompletion:^(NSError *error) { ... } ]</pre>\nTo get new changes from the server, use the <strong>pullWithQuery</strong> method:\n<pre class=\"prettyprint\">[self.syncTable pullWithQuery:query \n                      queryId:@\"allTodoItems\" \n                   completion:^(NSError *error) { ... } ]\n</pre>\nIf there are any pending changes for the sync table when doing a pull operation, then the SDK will first push all changes. To enable incremental sync, use the <strong>queryID</strong> parameter. A query ID is a descriptive string that should be unique for each query in your program; it’s used internally by the SDK to store a last-modified timestamp from the last pull operation. Subsequent pull operations will only retrieve records newer than this timestamp.\n\nThe <strong>pullWithQuery </strong>method also allows you to specify a particular subset of data that should be saved to the device. In the quickstart example, all todo items are retrieved, as it is a simple data model. But, suppose we added a field to denote the importance of a todo item. Then, the app could use the appropriate query to pull only high and normal importance items. Since the local store is using Core Data, you can use <strong>NSFetchedResultsController</strong> to integrate with your view controller using key-value observing. The iOS quickstart shows an example of this by connecting the table view to the Core Data managed object context. To learn more about offline sync in iOS and on other platforms, check out the following resources:\n<ul>\n\t<li>Tutorials: <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started-offline-data\">Get started with offline data sync in Mobile Services</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-handling-conflicts-offline-data/\">Handle conflicts with offline data sync</a></li>\n\t<li><a href=\"https://channel9.msdn.com/Shows/Cloud+Cover/Episode-155-Offline-Storage-with-Donna-Malayeri\">Cloud Cover episode on offline sync</a> (shows Windows, Xamarin, and iOS)</li>\n\t<li><a href=\"https://chrisrisner.com/LensRocket-for-iOS-Source-Code-Released\">iOS sample app – LensRocket</a></li>\n\t<li><a href=\"https://azure.microsoft.com/en-us/documentation/videos/azure-mobile-services-offline-enabled-apps-with-donna-malayeri/\">Azure Friday short video on offline sync</a> (Windows)</li>\n</ul>"
}