{
    "Slug": "announcing-azure-sdk-2-8-2-for-net",
    "Title": "Announcing the Azure SDK 2.8.2 for .NET",
    "Summary": "Today, weâ€™re excited to announce Azure SDK 2.8.2 for Visual Studio 2013 and Visual Studio 2015. This post will summarize the new features being released in the Azure SDK 2.8.2.",
    "Content": "<p>Today, we&rsquo;re excited to announce Azure SDK 2.8.2 for Visual Studio 2015. This release includes some user interface, validation improvements and engineering optimizations to improve the App Service developer experience. This post will summarize the new features being released in the Azure SDK 2.8.2.</p>\n\n<p><a href=\"https://azure.microsoft.com/en-us/downloads/\">Azure SDK 2.8.2 for .NET</a><br>\n[download for VS 2015]</p>\n\n<ul>\n <li><strong>User interface improvements: </strong>We&rsquo;ve improved the exception-handling logic in the provisioning experience and added UI cues to inform you during the App Service creation process of potential issues that may affect your deployments</li>\n <li><strong>Engineering improvements</strong>: Some performance tweaks have been made to improve the overall time-to-provision your App Service app code to Azure, as well as a series of engineering improvements that pave the way for advances in the future</li>\n <li><strong>Azure Resource Management (ARM) template export improvements: </strong>ARM template export now drops both the template <em>and </em>parameters files, so the exported files work more effortlessly with the <a href=\"https://azure.microsoft.com/en-us/documentation/articles/vs-azure-tools-resource-groups-deployment-projects-create-deploy/\" target=\"_blank\">Azure Resource Group Visual Studio project template</a></li>\n</ul>\n\n<h1>App Service tools user interface improvements</h1>\n\n<p>Following the Azure SDK 2.8.1 release, which included numerous leaps forward for App Service developers and a wholly redesigned experience, we had some great feedback from customers and teammates that a few minor UI cues and hints would go a long way towards making sure App Service users are able to quickly see if a topology creation had potential issues <em>before </em>they had to see deployment errors. We also took the opportunity to handle those errors more gracefully in the UI. Azure SDK 2.8.2 was our opportunity to create a <a href=\"https://blogs.msdn.com/b/ricom/archive/2015/12/16/pit-of-success-for-organizations.aspx\" target=\"_blank\">pit of success</a> for App Service users, and mitigate some obvious scenarios in which users experience issues during app creation.</p>\n\n<h2>Improved Resource Group creation cues</h2>\n\n<p>One of the assumptions about Resource Group creation we made during the Azure 2.8.1 SDK timeframe was providing a simple textbox for new Resource Groups would be intuitive. Late during testing we realized we could make the new Resource Group experience more obvious. In SDK 2.8.2, we&rsquo;ve added visual cues to the UI to inform users there&rsquo;s a clear path to new group creation. The UI auto-selects a Resource Group, but we&rsquo;ve added a new button providing placeholder text to let users know what&rsquo;s about to happen.</p>\n\n<p><img alt=\"image\" border=\"0\" height=\"47\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d595736b-3c53-4c77-8e46-5936597ce069.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" title=\"image\" width=\"480\"></p>\n\n<h2>Mitigating (and handling) deployment errors</h2>\n\n<p>What if, during my topology creation for a SQL-backed Web App, I want to create a SQL Server database but mistakenly click the Delete button for the SQL Server resource? This would lead to an ARM template in an invalid state; since the SQL Server Database resource depends on a new (or existing) SQL Server resource, the Azure Resource Manager would disallow the template and result in a deployment error. Instead of allowing me to create this situation in my topology, the App Service tools now inform me that things could get ugly if I try to submit this template.</p>\n\n<p><img alt=\"image\" border=\"0\" height=\"158\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/40a7f96c-ecdb-49db-981a-2fad3425b169.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" title=\"image\" width=\"360\"></p>\n\n<p>In the unforeseen case where the management API encounters an issue during provisioning, this same dialog is used, but we provide the exception details in a much more elegant manner than in the previous release. Though this is a contrived example in which a SQL Server was deleted that I intended on using for a new SQL Server database, the UI improvement is obvious &ndash; rather than simply &ldquo;message-boxing&rdquo; the exception returned from the Azure API, we&rsquo;re doing more to capture the exceptions gracefully and allow for simple copying the contents of the deeper exception out to a file.</p>\n\n<p><img alt=\"image\" border=\"0\" height=\"237\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5ff844e6-7e63-48a5-aa69-5ff26c68ddfd.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" title=\"image\" width=\"480\"></p>\n\n<h2>Connection string setup</h2>\n\n<p>To ease the out-of-the-box &ldquo;File - New Project&rdquo; scenario for ASP.NET developers accustomed to the <em>DefaultConnection</em> connection string defaults that are dropped in our ASP.NET project templates or to make it easy to change the name of the connection string as it&rsquo;d be in the App Service deployed environment, we&rsquo;ve added the &ldquo;Connection String Name&rdquo; textbox to the SQL Server database provisioning experience.</p>\n\n<p><img alt=\"image\" border=\"0\" height=\"480\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7a158405-93ce-4f20-9e82-38d9a01e63a9.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" title=\"image\" width=\"427\"></p>\n\n<h1>Engineering improvements</h1>\n\n<p>Through blog post comments, forums, and the <a href=\"https://connect.microsoft.com/VisualStudio/Feedback\" target=\"_blank\">Visual Studio Feedback Center</a>, we learned of some hangs during App Service provisioning. We worked with some great customers who were eager to share stack traces confirming some results we&rsquo;d seen in our own test environments. An upcoming performance optimization already in queue was confirmed to repair the provisioning issue, so we&rsquo;re excited to announce that the Azure SDK 2.8.2 mitigates this issue and has been fully tested for various deployment scenarios.</p>\n\n<p>We&rsquo;ve also made tweaks to certain areas of the App Service tooling that allow it to be more intelligent and to give us more abilities to respond to API changes without having to re-ship the entire App Service tooling extension. These features give us the ability to shield customers from minor changes in the APIs that would&rsquo;ve previously required hotfixes or manual updates. These features, along with other steps we&rsquo;ve taken towards opening up the &ldquo;resource cart&rdquo; idea to other partners, are proving to be exciting components in the future of Azure tooling.</p>\n\n<h1>Azure Resource Manager template export improvements</h1>\n\n<p>To provide developers an on-ramp to bootstrapping ARM templates In the Azure SDK 2.8.1, we introduced the &ldquo;Export button,&rdquo; which allows you to edit the ARM template created in the App Service app creation window. This way, once your topology is setup using the App Service app creation dialog and you&rsquo;ve finished adding additional resources like SQL databases to your Resource Group, you can easily export the topology in one click.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/baeb9621-4ef4-4843-b1be-af71edf2c804.png\"><img alt=\"image\" border=\"0\" height=\"458\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/91a80e15-b837-4474-a199-ddc327a11ceb.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" title=\"image\" width=\"610\"></a></p>\n\n<p>Now, the export process drops both a template <em>and </em>a separate parameters file, as shown in the Explorer window below.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ee9afa0f-7b85-4f92-8363-b6669880aed1.png\"><img alt=\"image\" border=\"0\" height=\"271\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/523c21ad-e37c-4e8e-a113-7f5ba88ad9c3.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" title=\"image\" width=\"610\"></a></p>\n\n<p>Once I create a new Azure Resource Group project, I can import the files I exported from the App Service app creation dialog into my new Resource Group project and make changes or setup additional environment-specific parameters files. Once I&rsquo;m ready to deploy, a simple right-click Deploy on the project will give me the opportunity to execute my ARM template and provision an entirely separate, yet mirrored, environment.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6c70686e-2448-4fdf-aee1-9dae84ccfc07.png\"><img alt=\"image\" border=\"0\" height=\"373\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/01df4d31-47c0-4668-8e78-9951929551e6.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" title=\"image\" width=\"610\"></a></p>\n\n<h1>Summary</h1>\n\n<p>If you don&rsquo;t already have an Azure account, you can sign-up for a <a href=\"https://azure.microsoft.com/en-us/pricing/free-trial/\">free one</a> and start using all of the above features today. Also, if you&rsquo;re interested in how simple it can be to get started with your very own pre-built app using <a href=\"https://tryappservice.azure.com/\" target=\"_blank\">Try App Service</a>. Then visit the <a href=\"https://azure.microsoft.com/en-us/get-started/\">Azure Developer Center</a> to learn more about how to build apps with it.</p>\n\n<p>Please submit bugs through <a href=\"https://connect.microsoft.com/visualstudio\">Connect</a>, suggestions through UserVoice, and quick thoughts or ideas through <a href=\"https://go.microsoft.com/fwlink/?linkid=517102&amp;clcid=0x409\">Send-a-smile</a> in the Visual Studio IDE.</p>\n"
}