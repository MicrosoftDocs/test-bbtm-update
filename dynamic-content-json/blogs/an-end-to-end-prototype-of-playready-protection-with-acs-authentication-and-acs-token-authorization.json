{
    "Slug": "an-end-to-end-prototype-of-playready-protection-with-acs-authentication-and-acs-token-authorization",
    "Title": "An End-to-End Prototype of PlayReady Protection with ACS Authentication and ACS Token Authorization",
    "Summary": "The dynamic PlayReady protection feature in Azure Media Services, makes “one-click DRM” a reality.",
    "Content": "&nbsp;\n<h1>Introduction</h1>\nThis end-to-end prototype was in response to the requests from customers in Asia and Europe.\n\n<a href=\"https://azure.microsoft.com/blog/2014/09/10/announcing-public-availability-of-azure-media-services-content-protection-services/\">Azure Media Services Content Protection</a> contains the following:\n<ul>\n <li>PlayReady license delivery service;</li>\n <li>AES 128 clear key delivery service;</li>\n <li>Dynamic PlayReady protection or AES encryption during delivery time;</li>\n <li>Static PlayReady protection or AES encryption in media processing workflow.</li>\n</ul>\nIt is notable that the dynamic PlayReady protection feature in Azure Media Services makes “one-click DRM” a reality: customers or partners do not need to go through any of the following steps which are required in \"traditional DRM\":\n<ol>\n <li>Secure PlayReady server license,</li>\n <li>Standing up PlayReady license server farm,</li>\n <li>Going through the PlayReady packaging workflow to protect an asset.</li>\n</ol>\nYou can protect or un-protect an asset with a \"single click\" and is done at the speed of a web page refresh.\n\nTypically a DRM solution involves multiple moving parts and the following blog provides an overview of the building blocks in a DRM solution: <a href=\"https://blogs.msdn.com/b/playready4/archive/2014/08/18/solution-design-considerations-in-using-playready-license-delivery-service-of-azure-media-services.aspx\">Solution Design Considerations in Using PlayReady License Delivery Service of Azure Media Services</a>. A complete end-to-end prototype would be desirable, which is the goal of this effort.\n\n&nbsp;\n<h2><span style=\"font-size: xx-large\">The End-to-End Prototype</span></h2>\n<h2>Design and Functionality</h2>\nThe goal of this effort is to provide an end-to-end prototype covering the following\n<ul>\n <li>PlayReady dynamic protection (or static protection) with Token Restriction for an asset in AMS;</li>\n <li>Azure Media Services license delivery service for delivering PlayReady licenses;</li>\n <li><a href=\"https://msdn.microsoft.com/en-us/library/azure/hh147631.aspx\">Azure ACS</a> (Microsoft Azure Active Directory Access Control) as an STS to issue SWT authorization tokens;</li>\n <li>A Silverlight player\n<ol>\n <li>gets authenticated by ACS Service Identity,</li>\n <li>gets authorization token from ACS,</li>\n <li>acquires PlayReady licenses from AMS license delivery service with ACS token and</li>\n <li>downloads Smooth Streaming or MPEG-DASH asset for subsequent video playback.</li>\n</ol>\n</li>\n</ul>\nI chose to use a Silverlight player simply for the following reasons:\n<ol>\n <li>To make the player accessible by popular browsers such as IE, Chrome and Firefox,</li>\n <li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=42080\" target=\"_blank\">Smooth Streaming Client v2.5</a> comes with PlayReady client support which does not require PlayReady client licensing,</li>\n <li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=42080\" target=\"_blank\">Smooth Streaming Client v2.5</a> also supports MPEG-DASH. This end-to-end prototype does cover MPEG-DASH in addition to smooth streaming.</li>\n</ol>\n&nbsp;\n\nThe design of this end-to-end prototype is illustrated by the following diagram. It is a specialization of the general DRM solution diagram discussed in the author’s blog <a href=\"https://blogs.msdn.com/b/playready4/archive/2014/08/18/solution-design-considerations-in-using-playready-license-delivery-service-of-azure-media-services.aspx\">Solution Design Considerations in Using PlayReady License Delivery Service of Azure Media Services</a>.\n\n&nbsp;\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/14/Blog_Secure_Delivery_Prototype.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Blog_Secure_Delivery_Prototype\" alt=\"Blog_Secure_Delivery_Prototype\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Blog_Secure_Delivery_Prototype_thumb.jpg\" width=\"636\" height=\"473\" border=\"0\" /></a>\n\n&nbsp;\n\nThe end-to-end prototype is hosted in Azure and Azure Media Services. Below is the information related to the prototype.\n<ul>\n <li>URL of smooth streaming asset under PlayReady dynamic protection;</li>\n <li>URL of MPEG-DASH asset under PlayReady dynamic protection;</li>\n <li><a href=\"https://willzhanmediaservice.keydelivery.mediaservices.windows.net/PlayReady/\" target=\"_blank\">URL for PlayReady license acquisition</a>;</li>\n <li>PlayReady license type: non-persistent (so that tests can be repeated any number of times in any time frame)</li>\n <li><a href=\"https://willzhanacs.accesscontrol.windows.net\" target=\"_blank\">URL of Azure ACS namespace issuing SWT authorization token</a>;</li>\n <li>URL of the Silverlight player;</li>\n <li>Authorization policy restriction:</li>\n</ul>\n<blockquote>\n<pre class=\"prettyprint\">&lt;TokenRestrictionTemplate xmlns:i=\"https://www.w3.org/2001/XMLSchema-instance\" xmlns=\"\"&gt;\n  &lt;AlternateVerificationKeys&gt;\n    &lt;TokenVerificationKey i:type=\"SymmetricVerificationKey\"&gt;\n      &lt;KeyValue&gt;(portion deleted) Yw1z2wxh6ZkX4tRl/WVhBTvM6T/vUo=&lt;/KeyValue&gt;\n    &lt;/TokenVerificationKey&gt;\n  &lt;/AlternateVerificationKeys&gt;\n  &lt;Audience&gt;urn:test&lt;/Audience&gt;\n  &lt;Issuer&gt;https://willzhanacs.accesscontrol.windows.net/&lt;/Issuer&gt;\n  &lt;PrimaryVerificationKey i:type=\"SymmetricVerificationKey\"&gt;\n    &lt;KeyValue&gt;(portion deleted) A8RlVMrPNhukYBF2sW04UMpuD8bw=&lt;/KeyValue&gt;\n  &lt;/PrimaryVerificationKey&gt;\n  &lt;RequiredClaims /&gt;\n&lt;/TokenRestrictionTemplate&gt;</pre>\n</blockquote>\n&nbsp;\n<h2></h2>\n<h2>How to Run It?</h2>\nHere are the simple steps to run this prototype using the test player:\n<ol>\n <li>Browse to the player</li>\n <li>Check “Add URL” checkmark so that you can enter URLs;</li>\n <li>Check “Add AuthN ACS Token” checkmark so that ACS authorization token will be requested first and will be used in PlayReady license acquisition from the license acquisition URL specified in LA_URL text box;</li>\n <li>Copy either the smooth streaming asset URL or the MPEG-DASH asset URL and paste it into the SRC_URL text box. Then, press the “Add to Playlist” button to play.</li>\n</ol>\n&nbsp;\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/15/Player.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Player\" alt=\"Player\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Player_thumb.jpg\" width=\"636\" height=\"249\" border=\"0\" /></a>\n\nUpon button click, the player will then:\n<ol>\n <li>Download the client manifest of the asset under PlayReady dynamic protection;</li>\n <li>Get authenticated by the ACS 2.0 namespace via its Service Identity;</li>\n <li>Request authorization token from ACS;</li>\n <li>Request PlayReady license from LA_URL with the ACS token;</li>\n <li>Decrypt, check PlayReady restriction and right, then playback the video.</li>\n</ol>\nOf course, if you uncheck the “Add AuthN ACS Token” checkmark and click the button, it will fail at PlayReady license acquisition due to missing authorization token from ACS namespace.\n\n&nbsp;\n<h1></h1>\n<h1>The Implementation</h1>\nThe implementation includes the following:\n<ol>\n <li>Configure PlayReady dynamic protection for an smooth streaming asset using Azure Media Services .NET API;\n<ul>\n <li>Generate content key ID and content key;</li>\n <li>Configure key delivery service;</li>\n <li>Configure dynamic PlayReady protection via asset delivery policy;</li>\n <li>Publish the asset.</li>\n</ul>\n</li>\n <li>Set up an Azure ACS 2.0 namespace to authenticate the player client and issue authorization tokens;</li>\n <li>Develop a Silverlight player which handles authentication, authorization, license acquisition and video playback.</li>\n</ol>\n<h2></h2>\n&nbsp;\n<h2>Content Key Generation</h2>\nThere are various approaches in generating content key IDs and content keys. For a detailed discussion, please see the <a href=\"https://blogs.msdn.com/b/playready4/archive/2014/08/18/solution-design-considerations-in-using-playready-license-delivery-service-of-azure-media-services.aspx\" target=\"_blank\">author’s blog</a> (Key Generation and Management section). For example, there are the following ways:\n<blockquote>\n<pre class=\"prettyprint\">string keySeedB64, contentKeyB64;\nGuid keyId = Guid.NewGuid();\n//Guid keyId = new Guid(\"09a2212a-a803-4989-9a6e-6cd2e69500e7\");</pre>\n&nbsp;\n<pre class=\"prettyprint\">   \n//Method 1: Without using key seed, generete content key directly\n//contentKeyB64 = GeneratePlayReadyContentKey();</pre>\n&nbsp;\n<pre class=\"prettyprint\">//Method 2: With a given key seed and generated key ID (Key Identifiers are unique in the system and there can only be one key with a given Guid within a cluster (even across accounts for now although that may change to be account scoped in the future).  If you try to submit a protection job with a keyId that already exists but a different key value that will cause the PlayReady protection job to fail (the same keyId and keyValue is okay). \nkeySeedB64 = \"XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I\";\ncontentKeyB64 = GetPlayReadyContentKeyFromKeyIdKeySeed(keyId.ToString(), keySeedB64);</pre>\n&nbsp;\n<pre class=\"prettyprint\">//Method 3: With a randomly generated key seed, create content key from the key ID and key seed\n//keySeedB64 = GeneratePlayReadyKeySeed();\n//contentKeyB64 = GetPlayReadyContentKeyFromKeyIdKeySeed(keyId.ToString(), keySeedB64);</pre>\n&nbsp;\n<pre class=\"prettyprint\">//Method 4: Reuse an existing key ID (only once, for test)\n//keyId = new Guid(\"a7586184-40ff-4047-9edd-6a8273ac50fc\");\n//keySeedB64 = \"XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I\";\n//contentKeyB64 = GetPlayReadyContentKeyFromKeyIdKeySeed(keyId.ToString(), keySeedB64);\nConsole.WriteLine(string.Format(\"STEP 1: Key ID = {0}, Content Key = {1}, Key Seed = {2}\", contentKeyB64, keyId.ToString(), keySeedB64));</pre>\n</blockquote>\nThe following utility methods are used in generating key ID and key seed:\n<blockquote>\n<pre class=\"prettyprint\">public static byte[] GenerateCryptographicallyStrongRandomBytes(int length)\n{\n    byte[] bytes = new byte[length];\n    //This type implements the IDisposable interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its Dispose method in a try/catch block. To dispose of it indirectly, use a language construct such as using (in C#) \n    using (var rng = new System.Security.Cryptography.RNGCryptoServiceProvider())\n    {\n        rng.GetBytes(bytes);\n    }\n    return bytes;\n}</pre>\n&nbsp;\n<pre class=\"prettyprint\">//generate a PlayReady content key: cryptographically strong random byte[16]\npublic static string GeneratePlayReadyContentKey()\n{\n    byte[] bytes = GenerateCryptographicallyStrongRandomBytes(16);\n    return Convert.ToBase64String(bytes);\n}</pre>\n&nbsp;\n<pre class=\"prettyprint\">public static string GeneratePlayReadyKeySeed()\n{\n    byte[] bytes = GenerateCryptographicallyStrongRandomBytes(30);   //30 for key seed: https://msdn.microsoft.com/en-us/library/hh973610.aspx\n    return Convert.ToBase64String(bytes);\n}</pre>\n&nbsp;\n<pre class=\"prettyprint\">public static string GenerateSymmetricHashKey()\n{\n    byte[] bytes = GenerateCryptographicallyStrongRandomBytes(32);  \n    return Convert.ToBase64String(bytes);\n}</pre>\n&nbsp;\n<pre class=\"prettyprint\">//This API works the same as AESContentKey constructor in PlayReady Server SDK \npublic static string GetPlayReadyContentKeyFromKeyIdKeySeed(string keyIdString, string keySeedB64)\n{\n    Guid keyId = new Guid(keyIdString);\n    byte[] keySeed = Convert.FromBase64String(keySeedB64);\n\n    byte[] contentKey = CommonEncryption.GeneratePlayReadyContentKey(keySeed, keyId);\n\n    string contentKeyB64 = Convert.ToBase64String(contentKey);\n\n    return contentKeyB64;\n}</pre>\n</blockquote>\n&nbsp;\n<h2>Code for Azure Media Services</h2>\nOn Azure Media Services side, suppose you have an unprotected smooth streaming asset. The steps are\n<ol>\n <li>Remove any locators this asset might have. This is important since the next step cannot proceed if locator exists.</li>\n <li>Remove any asset delivery policy it might have;</li>\n <li>Configure license delivery service;</li>\n <li>Configure dynamic PlayReady protection with token restriction;</li>\n <li>Publish the asset.</li>\n</ol>\nThe code for setting up PlayReady key delivery service and dynamic protection of the input asset can be found in <a href=\"https://github.com/Azure/azure-media-services-samples/blob/master/PlayReadyACSE2E/PlayReadyACSE2E_AMS_Code\" target=\"_blank\">GitHub Azure/azure-media-services-samples/</a>.\n\n&nbsp;\n<h2>ACS Setup</h2>\nPlease see Mingfei’s blog <a title=\"Permalink to How to configure ACS with Media Services key services\" href=\"https://mingfeiy.com/acs-with-key-services\">How to configure ACS with Media Services key services</a> for the steps of configuring an Azure ACS v 2.0 namespace.\n\nIn general there are two authentications:\n<ol>\n <li>End users are authenticated by an Identity Provider to gain access to the web application hosting the player, the so-called Relying Party. In this prototype, we have chosen to leave the web application open without the need for user authentication. Therefore there is no need of an Identity Provider for the web application.</li>\n <li>Client/autonomous applications are authenticated by ACS 2.0 namespace to gain access and acquire tokens. For this purpose, we specify a <a href=\"https://msdn.microsoft.com/en-us/library/gg185945.aspx\" target=\"_blank\">Service Identity</a> to authenticate directly with ACS instead of using an Identity Provider. This Service Identity is then used by client to get authenticated by ACS in order to request authorization token from the ACS namespace.</li>\n</ol>\n&nbsp;\n\nBelow is an example of a token issued by this ACS 2.0 namespace:\n<pre class=\"prettyprint\">http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=willzhan&amp;http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwillzhanacs.accesscontrol.windows.net%2f&amp;Audience=urn%3atest&amp;ExpiresOn=1415800463&amp;Issuer=https%3a%2f%2fwillzhanacs.accesscontrol.windows.net%2f&amp;HMACSHA256=ylYe9U18Ea1OfGJ%2fn2hzYfsm3XcM9X1HI2pBgUk54Eo%3d</pre>\n&nbsp;\n\n<strong>NOTE:</strong> Please make sure that the <strong>same</strong> (primary) symmetric hash key used in ACS 2.0 namespace is also used in configuring PlayReady dynamic protection. Specifically, when you programmatically set up PlayReady dynamic protection, you need to create Restriction Requirements used in IContentKeyAuthorizationPolicy, as shown below.\n<blockquote>\n<pre class=\"prettyprint\">public static string CreateRestrictionRequirements()\n{\n    string primarySymmetricKey   = System.Configuration.ConfigurationManager.AppSettings[\"PrimarySymmetricKey\"];\n    string secondarySymmetricKey = System.Configuration.ConfigurationManager.AppSettings[\"SecondarySymmetricKey\"];\n    string scope                 = System.Configuration.ConfigurationManager.AppSettings[\"AcsScope\"];\n    string issuer                = System.Configuration.ConfigurationManager.AppSettings[\"AcsIssuer\"];\n\n    TokenRestrictionTemplate objTokenRestrictionTemplate = new TokenRestrictionTemplate();\n\n    objTokenRestrictionTemplate.PrimaryVerificationKey = new SymmetricVerificationKey(Convert.FromBase64String(primarySymmetricKey));\n    objTokenRestrictionTemplate.AlternateVerificationKeys.Add(new SymmetricVerificationKey(Convert.FromBase64String(secondarySymmetricKey)));\n    objTokenRestrictionTemplate.Audience               = new Uri(scope);\n    objTokenRestrictionTemplate.Issuer                 = new Uri(issuer);\n\n    return TokenRestrictionTemplateSerializer.Serialize(objTokenRestrictionTemplate);\n}</pre>\n</blockquote>\n&nbsp;\n\nThe primarySymmetricKey variable should contain the same symmetric hash key string as obtained from ACS 2.0 Management Portal as shown below:\n\n&nbsp;\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/14/SymmetricHashKey.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"SymmetricHashKey\" alt=\"SymmetricHashKey\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/SymmetricHashKey_thumb.jpg\" width=\"632\" height=\"371\" border=\"0\" /></a>\n\nWhen you create Service Identity in ACS namespace, you may choose either Password or Symmetric Key credential types. The token request code has been enhanced to support both cases.\n\n&nbsp;\n<h2>Code on Client Side</h2>\nThe client side code for requesting authorization token from ACS and the custom license acquirer inside Silverlight can be found in <a href=\"https://github.com/Azure/azure-media-services-samples/blob/master/PlayReadyACSE2E/PlayReadyACSE2E_Client_Code\" target=\"_blank\">GitHub Azure/azure-media-services-samples</a>.\n\nPlayer application performs the following:\n<ol>\n <li>First request the manifest of a smooth streaming asset under PlayReady protection and sees the protection header in the manifest;</li>\n <li>In order to request PlayReady license, the player needs to get the authorization token from ACS namespace created in the last section. To avoid writing too much Silverlight specific code, you may consider putting this code in a (WCF or REST) service and let Silverlight app call the service to get ACS token. After you get the ACS token, you may store it in a property (Constants.AcsToken) to be used by the license acquirer immediately after.</li>\n <li>The ACS token is then used by a custom license acquirer to acquire a PlayReady license from AMS license delivery service configured in a previous section.</li>\n</ol>\n&nbsp;\n<h2>Deployment</h2>\nAs described in the system diagram above and the <a href=\"https://blogs.msdn.com/b/playready4/archive/2014/08/18/solution-design-considerations-in-using-playready-license-delivery-service-of-azure-media-services.aspx\" target=\"_blank\">author’s blog</a>, this end-to-end prototype contains the following physical components:\n<ol>\n <li>Content key and content key ID;</li>\n <li>Video asset (unprotected) in Azure Media Services and a streaming origin in Azure Media Services;</li>\n <li>PlayReady dynamic protection configured against the asset in Azure Media Services;</li>\n <li>PlayReady license delivery service configured in Azure Media Services;</li>\n <li>STS configured in Azure ACS 2.0 namespace;</li>\n <li>Silverlight video player in an ASP.NET application.</li>\n</ol>\nSince the solution is built on Azure Media Services, the only thing you need to deploy is the ASP.NET web application hosting the video player. You have the options to deploy it in\n<ul>\n <li>Azure web site,</li>\n <li>Azure IaaS VM, or</li>\n <li>your on-premise server.</li>\n</ul>\nPlease make sure that HTTP process activation is installed on the server otherwise WCF service will not work properly. Also please make sure you configure at least 1 RU for the streaming origin to use PlayReady dynamic protection.\n\n&nbsp;\n<h1>What about Live Streaming?</h1>\nThe good news is that you can use exactly the same design and implementation for protecting live streaming in Azure Media Services, by treating the asset associated with a program as the “VOD asset”.\n\nSpecifically, it is well known that to do live streaming in Azure Media Services, you need to create a channel, then a program under the channel. To create the program, you need to create an asset which will contain the live archive for the program. All you need to do, is to apply the same setup/processing to the asset as if it was a “VOD asset” before you start the program. The following code shows the precise flow.\n\nAs shown in <a href=\"https://github.com/Azure/azure-media-services-samples/blob/master/PlayReadyACSE2E/PlayReadyACSE2E_AMS_Code\" target=\"_blank\">the code for Azure Media Services</a>, we use the following method to set up dynamic PlayReady protection for a VOD asset:\n<pre class=\"prettyprint\">public static void SetupDynamicPlayReadyProtection(CloudMediaContext objCloudMediaContext, IAsset objIAsset)</pre>\nTo set up dynamic PlayReady protection for a live streaming, we can create a channel, a program and its asset as usual, but before starting the program, we run the above method against the asset, as shown below.\n<pre class=\"prettyprint\">public static void SetupLiveDynamicPlayReadyProtection(CloudMediaContext objCloudMediaContext, string channelName, string programName, string manifestFileName)\n        {\n            //get channel\n            IChannel objIChannel = objCloudMediaContext.Channels.Where(c =&gt; c.Name == channelName).FirstOrDefault();\n            Console.WriteLine(string.Format(\"IChannel.IngestUrl = {0}\",  objIChannel.Input.Endpoints.FirstOrDefault().Url.ToString()));\n            Console.WriteLine(string.Format(\"IChannel.PreviewUrl = {0}\", objIChannel.Preview.Endpoints.FirstOrDefault().Url.ToString()));\n\n            //create program asset\n            IAsset objIAsset = objCloudMediaContext.Assets.Create(string.Format(\"{0}_Program_Asset_PR\", channelName), AssetCreationOptions.None);\n\n            //set up dynamic PlayReady protection for the asset exactly as VOD\n            SetupDynamicPlayReadyProtection(objCloudMediaContext, objIAsset);\n\n            //create a program using this asset \n            ProgramCreationOptions options = new ProgramCreationOptions()\n            {\n                Name                = programName,\n                Description         = \"Dynamic PlayReady protection for live\",\n                ArchiveWindowLength = TimeSpan.FromMinutes(120.0),\n                ManifestName        = manifestFileName, //manifest file name to be duplicated (without .ism suffix)\n                AssetId             = objIAsset.Id\n            };\n            IProgram objIProgram = objIChannel.Programs.Create(options);\n\n            //publish the asset\n            Program.GetStreamingOriginLocator(objIAsset.Id, Program.MediaContentType.SmoothStreaming, true);\n\n            //start the program\n            objIProgram.Start();\n            Console.WriteLine(\"Program {0} has started\", programName);\n        }</pre>\n&nbsp;\n\nOf course, this is not the so-called “scalable live TV” PlayReady protection since a single content key is used for protection without the so-called key rotation for leaf and root licenses.\n<h1>Wrap-up</h1>\nWe have presented an end-to-end prototype of Azure Media Services PlayReady solution which includes all of the key components in a DRM solution:\n<ol>\n <li>Content key ID and content key generation;</li>\n <li>Streaming origin in Azure Media Services;</li>\n <li>PlayReady protection via Azure Media Services PlayReady dynamic protection feature;</li>\n <li>PlayReady license delivery via Azure Media Services PlayReady license delivery service;</li>\n <li>STS (Secure Token Service) via Azure ACS 2.0 to authenticate player client and issue authorization tokens;</li>\n <li>Video player application hosted in Azure IaaS VM, which handles ACS authentication, ACS authorization, PlayReady license acquisition and video playback.</li>\n</ol>\n&nbsp;\n\n<strong>UPDATES:</strong>\n\nOn 1/6/2015: The smooth streaming and MPEG-DASH player has been enhanced for testing PlayReady protection in more general scenarios:\n<ol>\n <li>It now works with any Azure ACS namespace instead of just the ACS namespace used for the end-to-end implementation discussed in this blog;</li>\n <li>It works with any smooth streaming or MPEG-DASH assets, either open or under dynamic PlayReady protection with or without token restriction;</li>\n <li>It works with any PlayReady license server, either key delivery service in Azure Media Services or on premise PlayReady license servers.</li>\n</ol>\n&nbsp;\n\nOn 1/23/2015: With the release of JWT support in AMS Content Protection, this prototype has been expanded to include token restriction with JWT by using Azure Active Directory (AAD) as both STS and IdP. AMS batch job (for setting up dynamic PlayReady protection or AES encryption): knows AAD tenant, but nothing about player app (any player is fine). AAD tenant: knows player app, but nothing about the AMS batch job. Player app: knows AAD tenant, but nothing about AMS or AMS batch job. In order words, AAD tenant and player app know each other. AMS batch job knows AAD tenant, but does not care what player consumes the contents.\n\n&nbsp;\n\n<b><span style=\"font-size: large\">ACKNOWLEDGMENT:</span> </b>Special thanks to Quintin Burns, George Trifonov and Mingfei Yan of Microsoft Azure Media Services Team, who have provided significant help in this effort."
}