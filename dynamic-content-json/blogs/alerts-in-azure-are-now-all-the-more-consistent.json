{
    "Slug": "alerts-in-azure-are-now-all-the-more-consistent",
    "Title": "Alerts in Azure are now all the more consistent!",
    "Summary": "Azure Monitor alerts provides rich alerting capabilities on a variety of telemetry such as metrics, logs, and activity logs. Over the past year, we have unified the alerting experience by providing a common consumption experience including UX and API for alerts.",
    "Content": "<p>Azure Monitor alerts provides rich alerting capabilities on a variety of telemetry such as metrics, logs, and activity logs. Over the past year, we have unified the alerting experience by providing a common consumption experience including UX and API for alerts. However, the payload format for alerts remained different which puts the burden of building and maintaining multiple integrations, one for each alert type based on telemetry, on the user. Today, we are releasing a new common alert schema that provides a single extensible format for all alert types.</p>\n\n<h2>What&rsquo;s the common alert schema?</h2>\n\n<p>With the common alert schema, all alert payloads generated by Azure Monitor will have a consistent structure. Any alert instance describes the resource that was affected and the cause of the alert, and these are described in the common schema in the following sections:</p>\n\n<ul>\n <li><strong>Essentials</strong>: A set of standardized fields which are common across all alert types. It describes what resource the alert is on, along with additional common alert metadata such as severity or description.</li>\n <li><strong>Alert context</strong>: A set of fields which describe the cause of the alert details that vary based on the alert type. For example, a metric alert would have fields like the metric name and metric value in the alert context, whereas an activity log alert would have information about the event that generated the alert.</li>\n</ul>\n\n<h2>How does it help me?</h2>\n\n<p>The typical workflow we hear from customers - both ITOps and DevOps teams - is that alerts go to the appropriate team (on-call individual) based on some metadata such as subscription ID, resource groups, and more. The common alert schema makes this workflow more streamlined by providing a clear separation between the essential meta-data that is needed to route the alert, and the additional context that the responsible team (or individual) needs to debug and fix the issue.</p>\n\n<p>Find more information about the <a href=\"https://aka.ms/commonAlertSchemaDefinitions\" target=\"_blank\">exact fields, versioning, and other schema related details</a>.</p>\n\n<h2>How is this going to impact me?</h2>\n\n<p>If you consume alerts from Azure in any manner whether it be email, webhooks, external tools, or others you might want to continue reading.</p>\n\n<ul>\n <li><strong>Email</strong>: A consistent and detailed email template allowing you to not only diagnose issues at a glance, but also jump to the process of working on the incident through deeplinks to the alert details on the portal and the affected resource.</li>\n <li><strong>SMS</strong>: A consistent SMS template</li>\n <li><strong>Webhook, Logic Apps, Azure Functions</strong>: A consistent JSON structure, allowing you to easily build integrations across different alert types.</li>\n</ul>\n\n<p>The new schema will also enable a more rich consumption experience across both the Azure portal and the Azure mobile app in the immediate future. You can learn more about the changes coming as part of this feature by visiting <a href=\"https://aka.ms/commonAlertSchemaDocs\" target=\"_blank\">our documentation</a>.</p>\n\n<h2>Why should I switch over from my existing integrations?</h2>\n\n<p>If you already have integrations with the existing schemas, the reason to switch over are many:</p>\n\n<ul>\n <li>Consistent alert structure means that you could potentially have fewer integrations, making the process of managing and maintaining these connectors a much simpler task.</li>\n <li>Payload enrichments like rich diagnostic information, ability to customize, and more would surface up only in the new schema.</li>\n</ul>\n\n<h2>How do I get this new schema?</h2>\n\n<p>To avoid breaking your existing integrations, the common alert schema is something you can opt-in to and opt-out of as well.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/08c77195-ddd3-497e-afdd-9e7296400b6d.png\"><img alt=\"Screenshot display for adding an action group\" border=\"0\" height=\"558\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/33f975ff-aaa8-42f8-8965-226ed12fa311.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"Screenshot display for adding an action group\" width=\"753\"></a></p>\n\n<p>To opt-in or out from the Azure portal:</p>\n\n<ol>\n <li>Open any <strong>existing or a new action</strong> in an action group.</li>\n <li>Select <strong>Yes</strong> for the toggle to enable the common alert schema as shown.</li>\n</ol>\n\n<p>If you wish to opt-in at scale, you can also use the <a href=\"https://aka.ms/commonAlertSchemaIntegrations\" target=\"_blank\">action groups API</a> to automate this process. Learn more about <a href=\"https://aka.ms/commonAlertSchemaDefinitions\" target=\"_blank\">how to write integrations</a> for the common alert schema and the alert context schemas for the different alert types.</p>\n\n<p>As always, we would love to hear your feedback. Please continue to share your thoughts at <a href=\"mailto:azurealertsfeedback@microsoft.com\">azurealertsfeedback@microsoft.com</a></p>\n"
}