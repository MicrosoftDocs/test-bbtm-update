{
    "Slug": "announcing-app-service-authentication-authorization",
    "Title": "Expanding App Service Authentication/Authorization",
    "Summary": "Today we are expanding the Authentication/Authorization feature for Azure App Service to include new identity providers, new sign-in options and greater flexibility in access control.",
    "Content": "<p>Around this time last year, my colleague <a href=\"https://azure.microsoft.com/en-us/blog/author/byvinyal/\">Byron Tardif</a> authored a post introducing <a href=\"https://azure.microsoft.com/en-us/blog/azure-websites-authentication-authorization/\">Azure Websites Authentication/Authorization</a>. This feature enabled users to quickly protect a site using Azure Active Directory with just a few clicks. We&rsquo;ve heard a lot of great things about the ease of use, but many customers wanted more flexibility, particularly around API scenarios.</p>\n\n<p>Then in March, we introduced Azure App Service, which brought together Web Apps, Mobile Apps; API Apps, and Logic Apps in a single offering. This included the App Service gateway, which allowed shared authentication among sites and expanded upon the login support from Mobile Services. However, one key request we heard from customers was for greater flexibility in authentication at the individual application level.</p>\n\n<p>Today, we are merging these approaches and expanding the Authentication/Authorization feature of App Service to include new identity providers, new sign-in options, and greater flexibility in access control. This gives customers all the richness of the gateway, but on a per-site basis and with an improved management experience. We recommend web and mobile applications use this feature instead of the App Service gateway going forward.</p>\n\n<h2>Getting started</h2>\n\n<p>App Service Authentication/Authorization is exposed in the Azure Preview Management Portal. To enable it, navigate the the <strong>Settings</strong> blade of any Web or Mobile App and select <strong>Authentication/Authorization</strong>. Flip the switch to On to view the options for protecting your site.</p>\n\n<p><img alt=\"Enabling Authentication / Authorization\" border=\"0\" height=\"414\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31481b46-df1f-40ef-9b30-77e003f6a3a3.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" title=\"Enabling Authentication / Authorization\" width=\"610\"></p>\n\n<p>One of the main changes is we have expanded the provider selection to include not only Azure Active Directory, but also Facebook, Google, Microsoft Account and Twitter. Clicking on any one of these options will allow you to configure settings that enable users to login with that provider. The Facebook and Microsoft Account blades also expose a list of optional scopes you can request at login time which enable your application to get more information about a user.</p>\n\n<p><img alt=\"Facebook configuration settings\" border=\"0\" height=\"480\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/86a5fbae-f0c6-4b7a-8c25-ac6f23f56f0b.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" title=\"Facebook configuration settings\" width=\"460\"></p>\n\n<p>&nbsp;</p>\n\n<p>We offer multiple modes for AAD, and you can choose to use the <strong>Express</strong> options to get configured with just a few clicks. If you prefer, you can provide AAD configuration manually using the <strong>Advanced</strong> option. For more details about configuring each of the providers, please see our <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-how-to-configure-active-directory-authentication/\">Azure Active Directory</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-how-to-configure-facebook-authentication/\">Facebook</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-how-to-configure-google-authentication/\">Google</a>, <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-how-to-configure-microsoft-authentication/\">Microsoft Account</a>, and <a href=\"https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-how-to-configure-twitter-authentication/\">Twitter</a> topics.</p>\n\n<h2>Deferred authorization</h2>\n\n<p>Many applications have varying access restrictions for different parts of the application. Perhaps you want some APIs to be publicly available, while others require sign-in. The original Authentication/Authorization feature was all-or-nothing, with the whole site requiring login. This option still exists, but we also allow your application code to render access decisions. Right now, this is best accomplished with ASP.NET sites, as we set the ThreadPrincipal with the user information if authenticated. Then your application can use the [Authorize] attribute on any actions that need protection, while others are allowed through. Applications using other platforms will want to use the full site protection option or manually validate the cookie or token.</p>\n\n<p>When you enable Authentication/Authorization, the application code is in charge of access decisions by default. If you wish to have the site redirect all unauthenticated traffic to a particular provider, select that provider from the <strong>Action to take when request is not authenticated</strong> dropdown.</p>\n\n<p><img alt=\"Selecting action for when client is unauthenticated\" border=\"0\" height=\"144\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/70dbfbc0-04f1-4fe2-99df-ba809e03d1c4.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" title=\"Selecting action for when client is unauthenticated\" width=\"480\"></p>\n\n<p>You can choose to configure multiple identity providers at a time, but only one can be configured for full site protection. Most applications using multiple providers will want to use the &ldquo;No action&rdquo; option for unauthenticated requests so the application can decide when and how to sign in the user.</p>\n\n<h2>Sign-in options</h2>\n\n<p>The original Authentication/Authorization only allowed login by redirecting the browser when an unauthenticated request reached the site. Now, developers can either leverage this behavior or explicitly start a login flow.</p>\n\n<p>Your application can trigger the same redirect itself by navigating the user to the /.auth/login/&lt;provider&gt; endpoint of your site, where <em>&lt;provider&gt;</em> is one of <em>aad, facebook, google, microsoftaccount,</em> and<em> twitter</em>. This option is perfect for sites featuring a login button and for many mobile applications.</p>\n\n<p>Alternatively, a client can obtain a token using a provider SDK and exchange it for a session token. Simply submit an HTTP POST to the same endpoint with the provider token in a JSON body under the key &ldquo;access_token&rdquo; (or &ldquo;authenticationToken&rdquo; for Microsoft Account). This is the preferred solution for mobile applications if a provider SDK is available on the platform, and it also works for many web and API applications.</p>\n\n<p>In fact, this support also means that App Service can allow headless authentications. If you have a daemon process or some other client needing access to APIs without an interface, you can request a token using an AAD service principal and use it for authentication with your application. In the case of AAD, we even allow you to bypass the session token and just include AAD tokens in the Authorization header, according to the bearer token specification.</p>\n\n<p>As of an update happening today, the Mobile Apps client SDKs now support both of the aforementioned flows in the LoginAsync() methods.</p>\n\n<h2>Token Store</h2>\n\n<p>One other option you&rsquo;ll note in the portal is the ability to enable or disable a token store. This feature allows underlying provider tokens to be stored in your application, accessible only when in the context of the associated user. This option is currently on by default and is required for mobile scenarios.</p>\n\n<p>In order to retrieve additional user information as well as any tokens required for graph calls, simply issue a GET to the /.auth/me endpoint on your site. If the request includes a valid session cookie or session token, information about the current user will be returned. The Mobile Apps server SDKs provide a GetAppServiceIdentityAsync() method to easily consume this API.</p>\n\n<h2>Go forth and authenticate</h2>\n\n<p>With that, you should have everything you need to get started with authentication in your App Service applications. We&rsquo;ll be working to expand our documentation set relating to this feature and its APIs, so check back here for additional feature improvements as well.</p>\n\n<p>We hope you will give App Service Authentication/Authorization a try and let us know what you like or don&rsquo;t. You can always reach the team on the <a href=\"https://feedback.azure.com/forums/34192--general-feedback\">Azure feedback site</a> and <a href=\"https://social.msdn.microsoft.com/Forums/azure/en-US/home\">MSDN forums</a>, or you can leave a reply in the comments below.</p>\n"
}