{
    "Slug": "always-on-real-time-threat-protection-with-azure-cosmos-db-part-one",
    "Title": "Always-on, real-time threat protection with Azure Cosmos DB - part one",
    "Summary": "Microsoft Azure Advanced Threat Protection is a cloud-based security service that uses customersâ€™ on-premises Azure Active Directory signals to identify, detect, and investigate advanced threats, compromised identities, and malicious insider actions.",
    "Content": "<p><em>This two-part blog post is a part of a series about how organizations are using Azure Cosmos DB to meet real world needs, and the difference it&rsquo;s making to them. In part one, we explore the challenges that led the Microsoft Azure Advanced Threat Protection team to adopt Azure Cosmos DB and how they&rsquo;re using it. In <a href=\"https://azure.microsoft.com/en-us/blog/always-on-real-time-threat-protection-with-azure-cosmos-db-part-two/\" target=\"_blank\">part two</a>, we&rsquo;ll examine the outcomes resulting from the team&rsquo;s efforts.</em></p>\n\n<h2>Transformation of a real-time security solution to cloud scale</h2>\n\n<p>Microsoft Azure Advanced Threat Protection is a cloud-based security service that uses customers&rsquo; on-premises Azure Active Directory signals to identify, detect, and investigate advanced threats, compromised identities, and malicious insider actions. Launched in 2018, it represents the evolution of Microsoft Advanced Threat Analytics, an on-premises solution, into Azure. Both offerings are composed of two main components:</p>\n\n<ol>\n <li>An agent, or sensor, which is installed on each of an organization&rsquo;s domain controllers. The sensor inspects traffic sent from users to the domain controller along with Event Tracing for Windows (ETW) events generated by the domain controller, sending that information to a centralized back-end.</li>\n <li>A centralized back-end, or center, which aggregates the information from all the sensors, learns the behavior of the organization&rsquo;s users and computers, and looks for anomalies that may indicate malicious activity.</li>\n</ol>\n\n<p>Advanced Threat Analytics&rsquo; center used an on-premises instance of MongoDB as its main database&mdash;and still does today for on-premises installations. However, in developing the Azure Advanced Threat Protection center, a managed service in the cloud, Microsoft needed something more performant and scalable. &ldquo;The back-end of Azure Advanced Threat Protection needs to massively scale, be upgraded on a weekly basis, and run continuously-evolving, advanced detection algorithms&mdash;essentially taking full advantage of all the power and intelligence that Azure offers,&rdquo; explains Yaron Hagai, Principal Group Engineering Manager for Advanced Threat Analytics at Microsoft.</p>\n\n<p>In searching for the best database for Azure Advanced Threat Protection to store its entities and profiles&mdash;the data learned in real time from all the sensors about each organization&rsquo;s users and computers&mdash;Hagai&rsquo;s team mapped out the following key requirements:</p>\n\n<ul>\n <li><strong>Elastic, per-customer scalability:</strong> Each organization that adopts Azure Advanced Threat Protection can install hundreds of sensors, generating potentially tens of thousands of events per second. To learn each organization&rsquo;s baseline and apply its anomaly detection algorithms in real-time, Azure Advanced Threat Protection needed a database that could efficiently and cost-effectively scale.</li>\n <li><strong>Ease of migration:</strong> The Azure Advanced Threat Protection data model is constantly evolving to support changes in detection logic. Hagai&rsquo;s team didn&rsquo;t want to worry about constantly maintaining backwards compatibility between the service&rsquo;s code and its ever-changing data model, which meant they needed a database that could support quick and easy data migration with almost every new update to Azure Advanced Threat Protection they deployed.</li>\n <li><strong>Geo-replication:</strong> Like all Azure services, Advanced Threat Protection must support customers&rsquo; critical disaster recovery and business continuity needs, including in the highly unlikely event of a datacenter failure. Through the use of geo-replication, customers&rsquo; data can be replicated from a primary datacenter to a backup datacenter, and the Azure Advanced Threat Protection workload can be switched to the backup datacenter in the event of a primary datacenter failure.</li>\n</ul>\n\n<h2>A managed, scalable, schema-less database in the cloud</h2>\n\n<p>The team chose Azure Cosmos DB as the back-end database for Azure Advanced Threat Protection. &ldquo;As the only managed, scalable, schema-less database in Azure, Azure Cosmos DB was the obvious choice,&rdquo; says Hagai. &ldquo;It offered the scalability needed to support our growing customer base and the load that growth would put on our back-end service. It also provided the flexibility needed in terms of the data we store on each organization and its computers and users. And it offered the flexibility needed to continually add new detections and modify existing ones, which in turn requires the ability to constantly change the data stored in our Azure Cosmos DB containers.&rdquo;</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/df089b93-20cf-4e7a-91c5-86db20701215.png\"><img alt=\"Azure Advanced Threat Protection diagram\" border=\"0\" height=\"468\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/26f5efba-060f-47c9-9308-2f436924f276.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"Azure Advanced Threat Protection diagram\" width=\"776\"></a></p>\n\n<h3>Containers and partitioning</h3>\n\n<p>Of the many APIs that <a href=\"https://www.azurecosmosdb.com/\" target=\"_blank\">Azure Cosmos DB</a> supports, the development team considered both the SQL API and the Azure Cosmos DB API for MongoDB for Azure Advanced Threat Protection. Eventually, they chose the SQL API because it gave them access to a rich, Microsoft-authored client SDK with support for multi-homing across global regions, and direct connectivity mode for low latency. Developers chose to allocate one Azure Cosmos DB database per tenant, or customer. Each database has five containers, which each start with a single partition. &ldquo;This allows us to easily delete the data for a customer if they stop using Azure Advanced Threat Protection,&rdquo; explains Hagai. &ldquo;More importantly, however, it lets us scale each customer&rsquo;s containers independently based on the throughput generated by their on-premises sensors.&rdquo;</p>\n\n<p>Of the set of containers per customer, two usually grow to more than one partition:</p>\n\n<ul>\n <li><em>UniqueEntity</em>, which contains all the metadata about the computers and users in the organization, as synchronized from Active Directory.</li>\n <li><em>UniqueEntityProfile</em>, which contains the behavioral baseline for each entity in the UniqueEntity container and is used by detection logic to identify behavioral anomalies that imply a compromised user or computer, or a malicious insider.</li>\n</ul>\n\n<p>&ldquo;Both containers have very high read/write throughput with large <a href=\"https://docs.microsoft.com/en-ca/azure/cosmos-db/request-units\" target=\"_blank\">Request Units per second (RU/s)</a> consumption,&rdquo; explains Hagai. &ldquo;Azure Cosmos DB seamlessly scales out storage of containers as they grow, and some of large customers have scaled up to terabytes in size per container, which would have not been possible with MongoDB on VMs.&rdquo;</p>\n\n<p>The other three containers for each customer typically contain less than 1,000 documents and do not grow past a single partition. They include:</p>\n\n<ul>\n <li><em>SystemProfile</em>, which contains data learned for the tenant and applied to behavioral based detections.</li>\n <li><em>SystemEntity</em>, which contains configuration information and data about tenants.</li>\n <li><em>Alert</em>, which contains alerts that are generated and updated by Azure Advanced Threat Protection.</li>\n</ul>\n\n<h3>Migration</h3>\n\n<p>As the Azure Advanced Threat Protection detection logic constantly evolves and improves, so does the behavioral data stored in each customer&rsquo;s UniqueEntityProfile container. To avoid the need for backwards compatibility with outdated schemas, Azure Advanced Threat Protection maintains two migration mechanisms, which run with each upgrade to the service that includes changes to its data models:</p>\n\n<ul>\n <li><strong>On-the-fly:</strong> As Azure Advanced Threat Protection reads documents from Azure Cosmos DB, it checks their version field. If the version is outdated, Azure Advanced Threat Protection migrates the document to the current version using explicit transformation logic written by Hagai&rsquo;s team of developers.</li>\n <li><strong>Batch:</strong> After a successful upgrade, Azure Advanced Threat Protection spins up a scheduled task to migrate all documents for all customers to the newest version, excluding those that have already been migrated by the on-the-fly mechanism.</li>\n</ul>\n\n<p>Together, these two migration mechanisms ensure that after the service was upgraded and the data access layer code was changed, no errors will occur due to parsing outdated documents. No backwards compatibility code is needed besides the explicit migration code, which is always removed in the subsequent version.</p>\n\n<h3>Elastic scaling and automatic backups</h3>\n\n<p>Containers with very high read/write throughput often are rate-limited as they reach their <a href=\"https://docs.microsoft.com/en-ca/azure/cosmos-db/set-throughput\" target=\"_blank\">provisioned RU/s limits for a c</a>ontainer. When one of the service&rsquo;s nodes, each node is a virtual machine, tries to perform an operation against a container and gets a <a href=\"https://docs.microsoft.com/en-us/rest/api/cosmos-db/http-status-codes-for-cosmosdb\" target=\"_blank\">&ldquo;429 Too Many Requests&rdquo; rate limiting exception</a>, it uses Azure Service Fabric remoting to send a request through a centralized elastic scaling service for increased throughput. The centralized service aggregates such requests from multiple nodes to avoid increasing throughput more than once within a short window of time, as this may be caused by a single burst of throughput that affects multiple nodes. To minimize overall RU/s costs, a similar, periodic scale-down process reduces provisioned throughput when appropriate, such as during each customer&rsquo;s non-working hours.</p>\n\n<p>Azure Advanced Threat Protection takes advantage of the <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/online-backup-and-restore\" target=\"_blank\">auto-backup feature of Azure Cosmos DB</a> to help protect each of the containers. The backups reside in Azure Blob storage and are replicated to another region through the use of geo-redundant storage (GRS). Azure Advanced Threat Protection also replicates customer configuration data to another region, which allows for quick recovery in the case of a disaster. &ldquo;We do this primarily to safeguard the sensor configuration data&mdash;preventing the need for an IT admin to reconfigure hundreds of sensors if the original database is lost,&rdquo; explains Hagai.</p>\n\n<p>Azure Advanced Threat Protection recently began onboarding full geo-replication. &ldquo;We&rsquo;ve started to enable geo-replication and multi-region writes for seamless and effortless replication of our production data to another region,&rdquo; says Hagai. &ldquo;This will allow us to further improve and guarantee service availability and will simplify service delivery versus having to maintain our own high-availability mechanisms.&rdquo;</p>\n\n<p>Continue on to <a href=\"https://azure.microsoft.com/en-us/blog/always-on-real-time-threat-protection-with-azure-cosmos-db-part-two/\" target=\"_blank\">part two</a>, which covers the outcomes resulting from the Azure Advanced Threat Protection team&rsquo;s implementation of Azure Cosmos DB.</p>\n"
}