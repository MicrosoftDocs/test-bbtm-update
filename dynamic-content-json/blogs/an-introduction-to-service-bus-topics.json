{
    "Slug": "an-introduction-to-service-bus-topics",
    "Title": "An Introduction to Service Bus Topics",
    "Summary": "[This article was contributed by the AppFabric team.]In the May CTP of Service Bus, we&rsquo;ve added a brand-new set of cloud-based, message-oriented-middleware technologies including reliableâ€¦",
    "Content": "<p>[This article was contributed by the AppFabric team.]</p><p class=\"Publishwithline\">In the May CTP of Service Bus, <span style=\"color: black;\">we&rsquo;ve added a brand-new set of cloud-based, message-oriented-middleware technologies including reliable message queuing and durable publish/subscribe messaging. Last week I posted the <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">Introduction to Service Bus Queues</a> blog entry. This post follows on from that and provides an introduction to the publish/subscribe capabilities offered by Service Bus Topics. Again, I&rsquo;m not going to cover all the features in this article, I just want to give you enough information to get started with the new feature. We&rsquo;ll have follow-up posts that drill into some of the details.</span></p>  <p class=\"MsoNormal\"><span style=\"color: black;\"><br>I&rsquo;m going to continue with the retail scenario that I started in the <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">queues blog post</a>. Recall that </span>sales data from individual Point of Sale (POS) terminals needs to be routed to an inventory management system which uses that data to determine when stock needs to be replenished. Each POS terminal reports its sales data by sending messages to the DataCollectionQueue where they sit until they are received by the inventory management system as shown below:</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7853.t1.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">Now let&rsquo;s evolve this scenario. A new requirement has been added to the system: the store owner wants to be able to monitor how the store is performing in real-time. </p>  <p class=\"MsoNormal\"><br>To address this requirement we need to take a &ldquo;tap&rdquo; off the sales data stream. We still want each message sent by the POS terminals to be sent to the Inventory Management System as before but we want another copy of each message that we can use to present the dashboard view to the store owner.</p>  <p class=\"MsoNormal\"><br>In any situation like this, where you need each message to be consumed by multiple parties, you need the Service Bus Topic feature. Topics provide the publish/subscribe pattern in which each published message is made available to each subscription registered with the Topic. Contrast this with the queue where each message is consumed by a single consumer. That&rsquo;s the key difference between the two models. </p>  <p class=\"MsoNormal\"><br>Messages are sent to a topic in exactly the same way as they are sent to a queue but messages aren&rsquo;t received from the topic directly, instead they are received from subscriptions. You can think of a topic subscription like a virtual queue that gets copies of the messages that are sent to the topic. Messages are received from a subscription in exactly the same way as they are received from a queue.</p>  <p class=\"MsoNormal\"><br>So, going back to the scenario, the first thing to do is to switch out the queue for a topic and add a subscription that will be used by the Inventory Management System. So, the system would now look like this:</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8546.t2.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">The above configuration would perform identically to the previous queue-based design. That is, messages sent to the topic would be routed to the Inventory subscription from where the Inventory Management System would consume them.</p>  <p class=\"MsoNormal\"><br>Now, in order to support the management dashboard, we need to create a second subscription on the topic as shown below:</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6758.t3.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\"><br>Now, with the above configuration, each message from the POS terminals will be made available to both the Dashboard and Inventory subscriptions.</p>  <h2 class=\"WordSection1\"><br>Show Me the Code</h2>  <p class=\"MsoNormal\">I described how to sign-up for a Service Bus account and create a namespace in the <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">queues blog post</a> so I won&rsquo;t cover that again here. Recall that to use the Service Bus namespace, an application needs to reference the AppFabric Service Bus DLLs, namely Microsoft.ServiceBus.dll and Microsoft.ServiceBus.Messaging.dll. You can find these as part of the SDK download.</p>  <h3 class=\"WordSection1\"><br>Creating the Topic and Subscriptions</h3>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">Management operations for Service Bus messaging entities (queues and topics) are performed via the ServiceBusNamespaceClient which is constructed with the base address of the Service Bus namespace and the user credentials. The ServiceBusNamespaceClient provides methods to create, enumerate and delete messaging entities. The snippet below shows how the ServiceBusNamespaceClient is used to create the DataCollectionTopic.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">&nbsp;</p>  <p class=\"MsoNormal\" style=\"margin-bottom: 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">Uri</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusEnvironment</span><span style=\"font-family: consolas; font-size: 8pt;\">.CreateServiceUri(<span style=\"color: #a31515;\">\"sb\"</span>, <span style=\"color: #a31515;\">\"ingham-blog\"</span>, <span style=\"color: blue;\">string</span>.Empty);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> name = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"owner\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> key = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"abcdefghijklmopqrstuvwxyz\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp; </span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusNamespaceClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> namespaceClient = </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">new</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusNamespaceClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">(</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baseAddress, </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">TransportClientCredentialBase</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">.CreateSharedSecretCredential(name, key) );</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">Topic</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> dataCollectionTopic = </span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">namespaceClient.CreateTopic(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">Note that there are overloads of the CreateTopic method that allow properties of the topic to be tuned, for example, to set the default time-to-live to be applied to messages sent to the topic. Next, let&rsquo;s add the Inventory and Dashboard subscriptions.</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Inventory\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Dashboard\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <h3 class=\"WordSection1\">Sending Messages to the Topic</h3>  <p class=\"MsoNormal\">As I mentioned earlier, applications send messages to a topic in the same way that they send to a queue so the code below will look very familiar if you read the <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">queues blog post</a>. The difference is the application creates a TopicClient instead of a QueueClient.</p>  <p class=\"MsoNormal\"><br>For runtime operations on Service Bus entities, i.e., sending and receiving messages, an application first needs to create a MessagingFactory. The base address of the ServiceBus namespace and the user credentials are required. </p>  <p class=\"MsoNormal\" style=\"margin-bottom: 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">Uri</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusEnvironment</span><span style=\"font-family: consolas; font-size: 8pt;\">.CreateServiceUri(<span style=\"color: #a31515;\">\"sb\"</span>, <span style=\"color: #a31515;\">\"ingham-blog\"</span>, <span style=\"color: blue;\">string</span>.Empty);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> name = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"owner\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> key = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"abcdefghijklmopqrstuvwxyz\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; MessagingFactory</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> factory = </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">MessagingFactory</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">.Create(</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baseAddress, </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">TransportClientCredentialBase</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">.CreateSharedSecretCredential(name, key) );</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">From the factory, a TopicClient is created for the particular topic of interest, in our case, the DataCollectionTopic.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; TopicClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> topicClient = factory.CreateTopicClient(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">A MessageSender is created from the TopicClient to perform the send operations.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; MessageSender</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> ms = topicClient.CreateSender();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">Messages sent to, and received from, Service Bus topics (and queues) are instances of the BrokeredMessage class which consists of a set of standard properties (such as Label and TimeToLive), a dictionary that is used to hold application properties, and a body of arbitrary application data. An application can set the body by passing in any serializable object into CreateMessage (the example below passes in a SalesData object representing the sales data from the POS terminal) which will use the DataContractSerializer to serialize the object. Alternatively, a System.IO.Stream can be provided.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: green; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> bm = </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">.CreateMessage(salesData);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; bm.Label = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"SalesReport\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; bm.Properties[</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"StoreName\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">] = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Redmond\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; bm.Properties[</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"MachineID\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">] = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"POS_1\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; ms.Send(bm);</span></p>  <h3 class=\"WordSection1\"><br>Receiving Messages from a Subscription</h3>  <p class=\"MsoNormal\">Just like when using queues, messages are received from a subscription using a MessageReceiver. The difference is that the MessageReceiver is created from a SubscriptionClient rather than a QueueClient. Everything else remains the same including support for the two different receive modes (ReceiveAndDelete and PeekLock) that I discussed in the <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">queues blog post</a>.</p>  <p class=\"MsoNormal\"><br>So, first we create the SubscriptionClient, passing the name of the topic and the name of the subscription as parameters. Here I&rsquo;m using the Inventory subscription.</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; SubscriptionClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> subClient = factory.CreateSubscriptionClient(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">, </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Inventory\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">Next we create the MessageReceiver and receive a message.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">MessageReceiver</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> mr = subClient.CreateReceiver();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> receivedMessage = mr.Receive();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">try</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; {</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ProcessMessage(receivedMessage);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receivedMessage.Complete();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; }</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">catch</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> (</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">Exception</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> e)</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; {</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receivedMessage.Abandon();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; }</span></p>  <h2 class=\"WordSection1\"><br>Subscription Filters</h2>  <p class=\"MsoNormal\">So far, I&rsquo;ve said that all messages sent to the topic are made available to all registered subscriptions. The key phrase there is &ldquo;made available&rdquo;. While Service Bus subscriptions see all messages sent to the topic, it is possible to only copy a subset of those messages to the virtual subscription queue. This is done using subscription filters. When a subscription is created, it&rsquo;s possible to supply a filter expression in the form of a SQL92 style predicate that can operate over the properties of the message, both the system properties (e.g., Label) and the application properties, such as StoreName in the above example.</p>  <p class=\"MsoNormal\"><br>Let&rsquo;s evolve the scenario a little to illustrate this. A second store is to be added to our retail scenario. Sales data from all of the POS terminals from both stores still need to be routed to the centralized Inventory Management System but a store manager using the Dashboard tool is only interested in the performance of her store. We can use subscription filtering to achieve this. Note that when the POS terminals publish messages, they set the StoreName application property on the message. Now we have two stores, let&rsquo;s say Redmond and Seattle, the POS terminals in the Redmond store stamp their sales data messages with a StoreName of Redmond while the Seattle store POS terminals use a StoreName of Seattle. The store manager of the Redmond store only wishes to see data from its POS terminals. Here&rsquo;s how the system would look:</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4628.t4.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">To set this routing up, we need to make a simple change to how we&rsquo;re creating the Dashboard subscription as follows:</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: #2b91af;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Dashboard\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">, </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">new</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">SqlFilterExpression</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"StoreName = 'Redmond'\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">With this subscription filter in place, only messages with the StoreName property set to Redmond will be copied to the virtual queue for the Dashboard subscription.</p>  <p class=\"MsoNormal\"><br>There is a bigger story to tell around subscription filtering. Applications have an option to have multiple filter rules per subscription and there&rsquo;s also the ability to modify the properties of a message as it passes in to a subscription&rsquo;s virtual queue. We&rsquo;ll cover these advanced topics in a separate blog post.</p>  <h2 class=\"WordSection1\"><br>Wrapping up</h2>  <p class=\"MsoNormal\">Hopefully this post has shown you how to get started with the topic-based publish/subscribe feature being introduced in the new May CTP of Service Bus.</p>  <p class=\"MsoNormal\"><br>It&rsquo;s worth noting that all of the reasons for using queuing that I mentioned in the introduction to <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">queuing blog post</a> also apply to topics, namely:</p>  <ul>  <li>  <div class=\"MsoNormal\">Temporal decoupling &ndash; message producers and consumers do not have to be online at the same time.</div>  </li>  <li>  <div class=\"MsoNormal\">Load leveling &ndash; peaks in load are smoothed out by the topic allowing consuming applications to be provisioned for average load rather than peak load.</div>  </li>  <li>  <div class=\"MsoNormal\">Load balancing &ndash; just like with a queue, it&rsquo;s possible to have multiple competing consumers listening on a single subscription with each message being handed off to only one of the consumers, thereby balancing load.</div>  </li>  <li>  <div class=\"MsoNormal\">Loose coupling &ndash; it&rsquo;s possible to evolve the messaging network without impacting existing endpoints, e.g., adding subscriptions or changing filters to a topic to accommodate new consumers.</div>  </li>  </ul>  <p class=\"MsoNormal\">We&rsquo;ve only really just scratched the surface here; we&rsquo;ll go in to more depth in future posts.</p>  <p class=\"MsoNormal\"><br>Finally, remember one of the main goals of our CTP release is to get feedback on the service. We&rsquo;re interested to hear what you think of the Service Bus messaging features. We&rsquo;re particularly keen to get your opinion of the API. So, if you have suggestions, critique, praise, or questions, please let us know at <a href=\"https://social.msdn.microsoft.com/Forums/en-US/appfabricctp/\">https://social.msdn.microsoft.com/Forums/en-US/appfabricctp/</a>. Your feedback will help us improve the service for you and other users like you. </p>"
}