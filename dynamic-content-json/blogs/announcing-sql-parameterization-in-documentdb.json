{
    "Slug": "announcing-sql-parameterization-in-documentdb",
    "Title": "Announcing SQL Parameterization in DocumentDB",
    "Summary": "We are pleased to announce support for parameterized SQL queries in the Azure DocumentDB REST API and SDKs.",
    "Content": "<p>We are pleased to announce support for parameterized SQL queries in the <a href=\"https://azure.microsoft.com/en-us/services/documentdb/\" target=\"_blank\">Azure DocumentDB </a>REST API and SDKs. Using this feature, you can now write parameterized SQL queries. Parameterized SQL provides robust handling and escaping of user input, preventing accidental exposure of data through &ldquo;SQL injection&rdquo; *. Let&#39;s take a look at a sample using the .NET SDK; In addition to plain SQL strings and LINQ expressions, we&#39;ve added a new SqlQuerySpec class that can be used to build parameterized queries. Here&#39;s a sample that queries a &quot;Books&quot; collection with a single user supplied parameter for author name:</p>\n\n<pre class=\"prettyprint\">\nIQueryable&lt;Book&gt; queryable = client.CreateDocumentQuery&lt;Book&gt;(\n                collectionSelfLink,\n                new SqlQuerySpec\n\t\t{\n                    QueryText = &quot;SELECT * FROM books b WHERE (b.Author.Name = @name)&quot;, \n                    Parameters = new SqlParameterCollection() \n\t\t    { \n                          new SqlParameter(&quot;@name&quot;, &quot;Herman Melville&quot;)\n                    }\n\t\t});</pre>\n\n<p>A few interesting things to note here:</p>\n\n<ul>\n\t<li>SQL parameters in DocumentDB use the familiar @ notation borrowed from T-SQL</li>\n\t<li>Parameter values can be any valid JSON (strings, numbers, Booleans, null, even arrays or nested JSON)</li>\n\t<li>Since DocumentDB is schema-less, parameters are not validated against any type</li>\n\t<li>We could just as easily supply additional parameters by adding additional SqlParameters to the SqlParameterCollection</li>\n</ul>\n\n<p>The DocumentDB REST API also natively supports parameterization. The .NET sample shown above translates to the following REST API call. To use parameterized queries, you need to specify the Content-Type Header as <em><b>application/query+json</b></em> and the query as JSON in the body, as shown below.</p>\n\n<pre class=\"prettyprint\">\nPOST https://contosomarketing.documents.azure.com/dbs/XP0mAA==/colls/XP0mAJ3H-AA=/docs\nHTTP/1.1 x-ms-documentdb-isquery: True \nx-ms-date: Mon, 18 Aug 2014 13:05:49 GMT \nauthorization: type%3dmaster%26ver%3d1.0%26sig%3dkOU%2bBn2vkvIlHypfE8AA5fulpn8zKjLwdrxBqyg0YGQ%3d \nx-ms-version: 2014-08-21 \nAccept: application/json \nContent-Type: application/query+json \nHost: contosomarketing.documents.azure.com \nContent-Length: 50 \n{      \n    &quot;query&quot;: &quot;SELECT * FROM books b WHERE (b.Author.Name = @name)&quot;,     \n    &quot;parameters&quot;: [          \n        {&quot;name&quot;: &quot;@name&quot;, &quot;value&quot;: &quot;Herman Melville&quot;}         \n    ] \n}</pre>\n\n<p>Queries can be issued against document collections, as well as system metadata collections like Databases, DocumentCollections, and Attachments using the approach shown above. To try this out, download the latest build of the DocumentDB SDK on any of the supported platforms (.NET, Java, Node.js, JavaScript, or Python).</p>\n\n<blockquote><em>*DocumentDB is not susceptible to the most common kinds of injection attacks that lead to &ldquo;elevation of privileges&rdquo; because queries are strictly read-only operations. However, it might be possible for a user to gain access to data they shouldn&rsquo;t be accessing within the same collection by crafting malicious SQL queries. SQL parameterization support helps prevent these sort of attacks.</em></blockquote>\n"
}